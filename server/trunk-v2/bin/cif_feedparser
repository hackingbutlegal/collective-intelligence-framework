#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Getopt::Std;
use CIF::FeedParser;
use Config::Simple;
use Data::Dumper;

my %opts;
getopts('hs:T:t:dFc:f:',\%opts);
my $debug = $opts{'d'};
my $config = $opts{'c'} || $ENV{'HOME'}.'/.cif';
my $throttle = $opts{'T'} || 'medium';
my $c = Config::Simple->new($config) || die($!.' '.$config);
my $f = $opts{'f'};
my $default = $c->param(-block => 'default');
my $hash = $c->param(-block => $f);
my $full_load = $opts{'F'} || $c->{'full_load'};
my $conf_dir = '/opt/cif/etc';
my $server_config = $opts{'s'} || $conf_dir.'/server.ini';
my $sconfig;
if(-e $server_config){
    $sconfig = Config::Simple->new($server_config);
}
die usage() if($opts{'h'} || !$f);

sub usage {
    return <<EOF;
Usage: perl $0 -c $conf_dir/misc.cfg -f malwaredomainlist -T low
    -h  --help:     this message
    -f  --feed:     feed name (eg: section header in the configuration file)
    -c  --config:   specify the configuration (or 'rules') file (default: $config)
    -s  --sconfig:  server config location (database stuff, default: $server_config)
    -F  --full:     "full load", meaning don't do NS resolution on domains
    -d --debug:     debug
    -T  --throttle: throttle (how man threads to use, default: $throttle)
                    low:    threads = 1/2 number of cores
                    medium: threads = number of cores
                    high:   threads = 2x number of cores

Examples:
    \$ $0 -c $conf_dir/spyeyetracker.cfg -f binaries -T medium -F
    \$ cif_feed_parser -c $conf_dir/misc.cfg -f malwaredomainlist -T high -F -d
EOF
}

unless(keys %$hash){
    die('section doesn\'t exist: '.$f."\n\n".usage());
}

foreach my $h (keys %$hash){
    $default->{$h} = $hash->{$h};
}

$c = $default;

my $threads = $opts{'t'} || CIF::Utils::throttle($throttle);

unless($full_load){
    if(my $val = $hash->{'no_resolve'}){
        $full_load = 1 if($val eq '1' || $val eq 'true');        
    }
}

if($debug){
    warn 'running '.$threads.' threads';
}

if($sconfig && $sconfig->param(-block => 'database')){
    $sconfig = $sconfig->param(-block => 'database');
    $c->{'database'} = ['DBI:'.$sconfig->{'driver'}.':database='.$sconfig->{'database'}.';host='.$sconfig->{'host'},$sconfig->{'user'},$sconfig->{'password'},{AutoCommit => 1}];
}

my ($err,$items) = CIF::FeedParser->parse($c);
if($err){
    unless($err =~ /no content/){
        warn($err);
        exit(-1);
    }
    exit(0);
}
   
exit(0) unless($items);

my $ret = CIF::FeedParser->process(
    full_load   => $full_load,
    config      => $c,
    entries     => $items,
    threads     => $threads,
);

exit(0);
