#!/usr/bin/perl -w

use strict;
use XML::RSS;
use LWP::Simple;
use Data::Dumper;
use Net::Abuse::Utils qw(:all);
use Regexp::Common qw/net/;
use DateTime::Format::DateParse;
use DateTime;
use Net::DNS;

use CIF::Message::Infrastructure;
use CIF::Message::Domain;
use CIF::Message::MalwareURL;

my $timeout = 5;
my $res = Net::DNS::Resolver->new(
    nameservers => ['8.8.8.8'],
);

my $partner = 'malwaredomainlist.com';
my $url = 'http://www.malwaredomainlist.com/hostslist/mdl.xml';
my $content;
my $rss = XML::RSS->new();

$content = get($url);
$rss->parse($content);

foreach my $item (@{$rss->{items}}){
    my ($url,$addr,$asn,$desc) = split(/,/,$item->{description});
    $url =~ s/Host: //;
    $addr =~ s/ IP address: //;
    $desc =~ s/ Description: //; 
    if($url =~ /^\-/){
        $url = $addr;
        $addr =~ /^($RE{net}{IPv4})/;
        $addr = $1;
    }

    my $reporttime;
    if($item->{title} =~ /\((\d{4}\/\d{2}\/\d{2}_\d{2}:\d{2})\)/){
        my $t = $1;
        $t =~ s/_/ /;
        $reporttime = DateTime::Format::DateParse->parse_datetime($t);
    }
    $reporttime .= 'Z';

    my $domain = $item->{'title'};
    if($domain =~ /^($RE{net}{IPv4})/){
        $domain = $1;
    } else {
        $domain =~ /^([A-Za-z0-9.-]+\.[a-zA-Z]{2,6})/;
        $domain = $1;
    }

    my $uuid;
    my $impact = 'malware url';
    $uuid = CIF::Message::MalwareURL->insert({
        address     => $url,
        source      => $partner,
        impact      => $impact,
        description => $impact.' '.$desc,
        confidence  => 3,
        severity    => 'medium',
        restriction => 'need-to-know',
        externalid  => 'http://www.malwaredomainlist.com/mdl.php?quantity=50&inactive=on&search='.$domain,
        externalid_restriction => 'public',
    });

    warn $uuid;
    $uuid = $uuid->uuid();
    my @rdata = getrdata($domain);
    foreach my $r (@rdata){
        my ($as,$network,$ccode,$rir,$date,$as_desc) = asninfo($r->{'address'});
        my $impact = 'malicious domain';
        my $duuid = CIF::Message::Domain->insert({
            address     => $domain,
            source      => $partner,
            confidence  => 2,
            severity    => 'medium',
            impact      => 'malicious domain',
            description => 'malicious domain '.$desc,
            relatedid   => $uuid,
            reporttime  => $reporttime,
            class       => $r->{'class'},
            rrtype      => $r->{'type'},
            rdata       => $r->{'address'},
            ttl         => $r->{'ttl'},
            asn         => $as,
            asn_desc    => $as_desc,
            cidr        => $network,
            cc          => $ccode,
            rir         => $rir,
            externalid => 'http://www.malwaredomainlist.com/mdl.php?quantity=50&inactive=on&search='.$domain,
            externalid_restriction => 'public',
            restriction => 'need-to-know',
        });
        warn $duuid;

        next unless($r->{'address'} && $r->{'address'} =~ /^$RE{net}{IPv4}$/);
        CIF::Message::Infrastructure->insert({
            relatedid   => $duuid->uuid(),
            source      => $partner,
            address     => $r->{'address'},
            impact      => 'malware infrastructure',
            description => 'malware infrastructure '.$desc.' - '.$r->{'address'},
            confidence  => 2,
            severity    => 'medium',
            reporrtime  => $reporttime,
            asn         => $as,
            asn_desc    => $as_desc,
            cidr        => $network,
            cc          => $ccode,
            rir         => $rir,
            restriction => 'need-to-know',
            externalid => 'http://www.malwaredomainlist.com/mdl.php?quantity=50&inactive=on&search='.$r->{'address'},
            externalid_restriction => 'public',
        });
    }
 

}

sub getrdata {
    my $d = shift;
    return undef unless($d);

    my $bgsock = $res->bgsend($d);
    my $sel = IO::Select->new($bgsock);

    my @rdata;
    my @ready = $sel->can_read($timeout);
    if(@ready){
        foreach my $sock (@ready){
            if($sock == $bgsock){
                my $packet = $res->bgread($bgsock);
                foreach my $rr ($packet->answer()){
                    my $x = (uc($rr->{'type'}) eq 'A') ? $rr->address() : $rr->cname();
                    push(@rdata,{ address => $x, type => $rr->type(), class => $rr->class(), ttl => $rr->ttl() });
                }
                $bgsock = undef;
            }
            $sel->remove($sock);
            $sock = undef;
        }
    } else {
        warn "timed out after $timeout seconds\n";
    }
    if($#rdata < 0){
        push(@rdata,{ address => undef, type => 'A', class => 'IN', ttl => undef });
    }
    return(@rdata);
}

sub asninfo {
    my $a = shift;
    return undef unless($a);
    my ($as,$network,$ccode,$rir,$date) = get_asn_info($a);
    my $as_desc;
    $as_desc = get_as_description($as) if($as);

    $as         = undef if($as && $as eq 'NA');
    $network    = undef if($network && $network eq 'NA');
    $ccode      = undef if($ccode && $ccode eq 'NA');
    $rir        = undef if($rir && $rir eq 'NA');
    $date       = undef if($date && $date eq 'NA');
    $as_desc    = undef if($as_desc && $as_desc eq 'NA');
    $a          = undef if($a eq '');
    return ($as,$network,$ccode,$rir,$date,$as_desc);
}
