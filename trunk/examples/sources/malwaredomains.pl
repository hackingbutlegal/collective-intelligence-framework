#!/usr/bin/perl -w

use strict;
use Error qw(:try);
use Data::Dumper;
use XML::IODEF;
use DateTime;
use DateTime::Format::DateParse;
use XML::LibXML;
use Net::DNS;
use Net::Abuse::Utils qw(:all);

use CIF::Message::Domain;
use CIF::Message::Inet;
use CIF::Message::Infrastructure;
use CIF::Message::Malware;

my $partner = 'malwaredomains.com';
my $timeout = 5;
my $res = Net::DNS::Resolver->new(
    nameservers => ['8.8.8.8']
);
open(F,'/tmp/domains.txt');

my $x = 0;
while(<F>){
    next if(/^#/);
    $_ =~ s/^[ \t]+|[ \t]+$//;
    my ($domain,$type,$orig_ref,$date) = split(/[ \t]+/,$_);
    next unless($orig_ref =~ /md5/);
    
    my $bgsock = $res->bgsend($domain);
    my $sel = IO::Select->new($bgsock);
    $type = 'unknown' if($type eq 'malware' || $type eq 'threat');

    my @rdata;
    my @ready = $sel->can_read($timeout);
    if(@ready){
        foreach my $sock (@ready){
            if($sock == $bgsock){
                my $packet = $res->bgread($bgsock);
                foreach my $rr ($packet->answer()){
                    push(@rdata,{ address => $rr->address, type => $rr->type(), class => $rr->class(), ttl => $rr->ttl() });
                }
                $bgsock = undef;
            }
            $sel->remove($sock);
            $sock = undef;
        }
    } else {
        warn "timed out after $timeout seconds\n";
    }

    $date = eval { DateTime::Format::DateParse->parse_datetime($date) };
    my $uuid = CIF::Message::Domain->insert({
        address     => $domain,
        source      => $partner,
        confidence  => 5,
        severity    => 'medium',
        description => 'malicious domain '.$type.' - '.$domain,
        impact      => 'malicious domain '.$type,
        detecttime  => $date,
        class       => 'IN',
        type        => 'A',
        restriction => 'need-to-know',
        alternativeid  => 'http://www.malwaredomains.com/files/domains.txt',
        alternativeid_restriction => 'public',
    });

    if($orig_ref =~ /md5\=([0-9a-fA-F]{32})$/){
        my $hash_md5 = $1;
        my $mid = CIF::Message::Malware->insert({
            description => 'malware '.$type.' - '.$hash_md5,
            source      => $partner,
            hash_md5    => $hash_md5,
            impact      => 'malware '.$type,
            restriction => 'need-to-know',
            severity    => 'medium',
            confidence  => 5,
            relatedid   => $uuid->uuid(),
            alternativeid  => 'http://www.malwaredomains.com/files/domains.txt',
            alternativeid_restriction => 'public',
            detecttime  => $date,
       });
    }

    if($#rdata >= 0){
        foreach my $rr (@rdata){
            my ($as,$network,$ccode,$rir,$date) = get_asn_info($rr->{'address'});
            my $as_desc;
            $as_desc = get_as_description($as) if($as);

            $as         = undef if($as && $as eq 'NA');
            $network    = undef if($network && $network eq 'NA');
            $ccode      = undef if($ccode && $ccode eq 'NA');
            $rir        = undef if($rir && $rir eq 'NA');
            $date       = undef if($date && $date eq 'NA');
            $as_desc    = undef if($as_desc && $as_desc eq 'NA');
    
            my $u = CIF::Message::Domain->insert({
                relatedid   => $uuid->uuid(),
                address     => $domain,
                source      => $partner,
                confidence  => 5,
                severity    => 'medium',
                impact      => 'malicious domain '.$type,
                description => 'malicious domain '.$type.' - '.$domain,
                detecttime  => $date,
                class       => $rr->{'class'},
                ttl         => $rr->{'ttl'},
                type        => $rr->{'type'},
                rdata       => $rr->{'address'},
                asn         => $as,
                asn_desc    => $as_desc,
                cidr        => $network,
                cc          => $ccode,
                rir         => $rir,
                restriction => 'need-to-know',
                alternativeid  => 'http://www.malwaredomains.com/files/domains.txt',
                alternativeid_restriction => 'public',
            });

            CIF::Message::Infrastructure->insert({
                relatedid   => $u->uuid(),
                address     => $rr->{'address'},
                impact      => 'malware infrastructure '.$type,
                source      => $partner,
                description => 'malware infrastructure '.$type.' - '.$rr->{'address'},
                confidence  => 3,
                severity    => 'medium',
                detecttime  => $date,
                restriction => 'need-to-know',
                asn         => $as,
                asn_desc    => $as_desc,
                cc          => $ccode,
                cidr        => $network,
                rir         => $rir,
                alternativeid  => 'http://www.malwaredomains.com/files/domains.txt',
                alternativeid_restriction => 'public',
            });
        }
    }
}

close(F);
