#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use DateTime;
use DateTime::Format::DateParse;
use Net::DNS;
use Net::Abuse::Utils qw(:all);
use Regexp::Common qw/net/;
use LWP::Simple;

use CIF::Message::Malware;
use CIF::Message::DomainSimple;

my $partner = 'malwaredomains.com';
my $url = 'http://www.malwaredomains.com/files/domains.txt';
my $timeout = 5;
my $res = Net::DNS::Resolver->new(
    nameservers => ['8.8.8.8']
);

#my $content = get($url);
#my @lines = split(/\n/,$content);
my @lines;
open(F,'/tmp/domains.txt');
while(<F>){
    push(@lines,$_);
}
close(F);

my $x = 0;
foreach (@lines){
    next if(/^#/);
    $_ =~ s/^[ \t]+|[ \t]+$//;
    my ($domain,$type,$orig_ref,$date) = split(/[ \t]+/,$_);
    
    $type = 'unknown' if($type eq 'malware' || $type eq 'threat');

    $date = eval { DateTime::Format::DateParse->parse_datetime($date) };
   
    my $uuid; 
    if($orig_ref =~ /md5\=([0-9a-fA-F]{32})$/){
        my $hash_md5 = $1;
        $uuid = CIF::Message::Malware->insert({
            description => 'malware '.$type.' - '.$hash_md5,
            source      => $partner,
            hash_md5    => $hash_md5,
            impact      => 'malware '.$type,
            restriction => 'need-to-know',
            severity    => 'medium',
            confidence  => 5,
            alternativeid  => 'http://www.malwaredomains.com/files/domains.txt',
            alternativeid_restriction => 'public',
            detecttime  => $date,
       });
       $uuid = $uuid->uuid();
    }
    
    my $impact = 'malicious domain '.$type;
    my $desc = $impact.' '.$domain;

    my $u = CIF::Message::DomainSimple->insert({
        nsres       => $res,
        relatedid   => $uuid,
        address     => $domain,
        source      => $partner,
        confidence  => 5,
        severity    => 'medium',
        impact      => $impact,
        description => $desc,
        detecttime  => $date,
        restriction => 'need-to-know',
        alternativeid  => 'http://www.malwaredomains.com/files/domains.txt',
        alternativeid_restriction => 'public',
    });
    warn $u;
}
