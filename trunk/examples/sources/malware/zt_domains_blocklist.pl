#!/usr/bin/perl -w

use strict;
use LWP::Simple;
use Data::Dumper;
use Net::Abuse::Utils qw(:all);
use Regexp::Common qw/net/;
use DateTime::Format::DateParse;
use DateTime;
use Net::DNS;

use CIF::Message::Infrastructure;
use CIF::Message::InetWhitelist;
use CIF::Message::MaliciousDomain;
use CIF::Message::SuspiciousNameserver;
use CIF::Message::Inet;

my $timeout = 5;
my $res = Net::DNS::Resolver->new(
    nameservers => ['8.8.8.8'],
);

my $partner = 'zeustracker.abuse.ch';
my $url = 'https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist';

my $content = get($url);

my @lines = split(/\n/,$content);
foreach (@lines){
    next if(/^(#|$)/);
    my $domain = $_;

    my $detecttime = DateTime->from_epoch(epoch => time());
    $detecttime = $detecttime->ymd().'T00:00:00Z';

    my @rdata = CIF::Message::Domain::getrdata($res,$domain);

    foreach my $r (@rdata){
        my ($as,$as_desc,$network,$ccode,$rir,$dt);
        my $address = $r->{'address'};
        if($address && $address =~ /^$RE{net}{IPv4}/){
            ($as,$network,$ccode,$rir,$dt) = get_asn_info($address);
            $as_desc = get_as_description($as) if($as);

            $as         = undef if($as && $as eq 'NA');
            $network    = undef if($network && $network eq 'NA');
            $ccode      = undef if($ccode && $ccode eq 'NA');
            $rir        = undef if($rir && $rir eq 'NA');
            $dt         = undef if($dt && $dt eq 'NA');
            $as_desc    = undef if($as_desc && $as_desc eq 'NA');
        }
        
        my $bucket = 'CIF::Message::MaliciousDomain';
        my $impact = 'malicious domain zeus';
        my $description = $impact.' - '.$domain;
        my $t = $r->{'type'};
        my $severity = ($t eq 'NS') ? 'low' : 'medium';
        my $d = $domain;
    
        if($r->{'nameserver'}){
            $bucket = 'CIF::Message::SuspiciousNameserver';
            $d = $r->{'nameserver'};
            $impact = 'suspicious nameserver zeus';
            $description = $impact.' '.$domain.' - '.$d;
            $severity = 'low';
        }
        if($r->{'cname'}){
            $d = $r->{'cname'};
            $description = $impact .= ' '.$domain.' - '.$d;
        }
        my $u = $bucket->insert({
            address     => $d,
            source      => $partner,
            confidence  => 5,
            severity    => $severity,
            impact      => $impact,
            description => $description,
            detecttime  => $detecttime,
            class       => $r->{'class'},
            ttl         => $r->{'ttl'},
            type        => $t,
            rdata       => $address,
            asn         => $as,
            asn_desc    => $as_desc,
            cidr        => $network,
            cc          => $ccode,
            rir         => $rir,
            restriction => 'need-to-know',
            alternativeid => 'https://zeustracker.abuse.ch/monitor.php?host='.$domain,
            alternativeid_restriction => 'public',
        });
        unless($r->{'type'} eq 'CNAME' || !$address || $address !~ /^$RE{net}{IPv4}/){
            next if(CIF::Message::Inet::isPrivateAddress($r->{'address'}) || CIF::Message::InetWhitelist::isWhitelisted($r->{'address'}));
            CIF::Message::Infrastructure->insert({
                relatedid   => $u->uuid(),
                source      => $partner,
                address     => $r->{'address'},
                impact      => 'malware infrastructure zeus ',
                description => 'malware infrastructure zeus '.$domain.' - '.$r->{'address'},
                confidence  => 2,
                severity    => 'medium',
                detecttime  => $detecttime,
                asn         => $as,
                asn_desc    => $as_desc,
                cidr        => $network,
                cc          => $ccode,
                rir         => $rir,
                restriction => 'need-to-know',
                alternativeid => 'https://zeustracker.abuse.ch/monitor.php?ipaddress='.$r->{'address'},
                alternativeid_restriction => 'public',
            });
        }
        warn $u;
    }
}
