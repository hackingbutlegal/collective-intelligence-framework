package CIF::Archive::DataType::Plugin::Malware;
use base 'CIF::Archive::DataType';

use strict;
use warnings;

use Module::Pluggable require => 1, search_path => ['CIF::Archive::DataType::Plugin::Malware'];

__PACKAGE__->table('malware');
__PACKAGE__->columns(Primary => 'id');
__PACKAGE__->columns(All => qw/id uuid description source hash_sha1 hash_md5 content impact confidence severity restriction alternativeid alternativeid_restriction detecttime created/);
__PACKAGE__->columns(Essential => qw/id uuid description hash_sha1 hash_md5 restriction created/);
__PACKAGE__->sequence('malware_id_seq');

sub prepare {
    my $class = shift;
    my $info = shift;
    
    return(undef) unless($info->{'impact'} && $info->{'impact'} eq 'malware');

    my $hash = $info->{'hash_sha1'} || $info->{'hash_md5'} || return(undef);
    $hash = lc($hash);

    return(undef) unless($hash =~ /^[a-f0-9]{32,40}$/);
    return(1);
}

sub insert {
    my $self = shift;
    my $info = shift;
   
    my $tbl = $self->table();
    foreach($self->plugins()){
        if(my $t = $_->prepare($info)){
            $self->table($t);
        }
    }
 
    my $id = eval { $self->SUPER::insert({
        uuid        => $info->{'uuid'},
        description => lc($info->{'description'}),
        source      => $info->{'source'},
        hash_md5    => $info->{'hash_md5'},
        hash_sha1   => $info->{'hash_sha1'},
        content     => $info->{'content'},
        impact      => $info->{'impact'},
        confidence  => $info->{'confidence'},
        severity    => $info->{'severity'},
        restriction => $info->{'restriction'} || 'private',
        detecttime  => $info->{'detecttime'},
        alternativeid   => $info->{'alternativeid'},
        alternativeid_restriction => $info->{'alternativeid_restriction'} || 'private',
    }) };
    if($@){
        die $@ unless($@ =~ /duplicate key value violates unique constraint/);
        $id = $self->retrieve(uuid => $info->{'uuid'});
    }
    $self->table($tbl);
    return($id);
}

sub lookup {
    my $self = shift;
    my $info = shift;
    return(undef) unless($self->prepare($info));
    my $query = $info->{'query'};
    my $limit = $info->{'limit'} || 5000;

    $limit = 5000 unless($limit);

    my $htype = (length($query) == 32) ? 'hash_md5' : 'hash_sha1';
    my $sql = qq{
        WHERE lower($htype) = '$query'
        ORDER BY detecttime DESC, created DESC, id DESC
        LIMIT $limit
    };
    my @recs = $self->retrieve_from_sql($sql);
    return(\@recs);
}

sub feed {
    my $class = shift;
    my $info = shift;

    $info->{'key'} = 'hash_md5';
    return($class->SUPER::feed($info));
}
1;

__END__
