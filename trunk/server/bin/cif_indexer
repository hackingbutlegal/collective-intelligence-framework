#!/usr/bin/perl 

use strict;
use warnings;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use threads;
use Getopt::Std;
use Data::Dumper;

my %opts;
getopts('a:p:t:m:M:s:dhS:',\%opts);

our $debug      = $opts{'d'};
my $set_limit   = $opts{'s'} || 150000;
my $min         = $opts{'m'};
my $max         = $opts{'M'};
my $threads     = $opts{'t'} || 8;
my $plug        = $opts{'p'} || die('missing plugin to run');
my $batch_limit = $opts{'b'} || 10000;
my $autocommit  = $opts{'a'};
$autocommit = 1 unless(defined($autocommit));

my $bail = 0;
$SIG{'INT'} = sub {
    print "nCaught Interrupt (^C), Aborting\n";
    exit(-1);
    $bail++;
    if($bail > 1){
        exit(-1);
    }
};

my $ret = threads->create('get_minmax')->join();

$min = $ret->{'min'} unless($min);
$max = $ret->{'max'} unless($max);

die 'missing min' unless($min);
die 'missing max' unless($max);

my $total = ($max - $min);
my $sets = int($total / $set_limit) + 1;
warn "sets: $sets" if($debug);
foreach (1 ... $sets+1){
    if($set_limit > ($max-$min)){
        $set_limit = ($max-$min);
    }
    my $end = $min+$set_limit;
    warn "running set: $_ $min -- $end" if($debug);
    threads->create('run_set',$min,$end)->join();
    $min = ($min+$end+1);
    my $completed = (($sets+1)/$_) * 100;
    warn sprintf('%.3f',$completed).'% completed'; 
    last if($min >= $max);
}

sub run_set {
    my ($start,$end) = @_;
    my @joinable;
    my $t;
    my @array = map { $_ } ($start ... $end);
    require CIF::Utils;
    my $batches = CIF::Utils::split_batches($threads,\@array);
    foreach (@$batches){
        threads->create(\&process,$_);
    }
    
    while(threads->list()){
        @joinable = threads->list(threads::joinable);
        if($#joinable > -1){
            foreach(@joinable){
                $_->join();
            }
        } else {
            sleep(1);
        }
    }
}

sub process {
    my $b = shift;

    require CIF::Archive;
    $plug = 'CIF::Archive::DataType::Plugin::'.ucfirst($plug) unless($plug =~ /^CIF::/);
    eval "require $plug";
    $plug->db_Main->{'AutoCommit'} = 0 unless($autocommit);

    my $x = 1;
    my $total = scalar(@$b);
    foreach(@$b){
        $_ = CIF::Archive->retrieve(id => $_);
        next unless($_);
        my @recs = @{$_->data_hash_simple()};
        foreach my $r (@recs){
            next unless($plug->prepare($r));
            my $id = $plug->insert($r);
        }
        my $done = (($x++/$total) * 100);
        $done = sprintf("%.3f",$done);
        if($x % 1000 == 0){
            warn 'THREAD: '.threads->tid().' '.$done.'% completed';
        }
    }
    $plug->dbi_commit() unless($autocommit);

}

sub get_minmax {
    require CIF::Archive;
    my $min = CIF::Archive->minimum_value_of('id');
    my $max = CIF::Archive->maximum_value_of('id');

    return({
        min => $min,
        max => $max,
    });
}
