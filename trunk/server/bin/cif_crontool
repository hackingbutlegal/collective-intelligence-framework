#!/usr/bin/perl -w

use strict;
use warnings;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Config::Simple;
use Getopt::Std;
use Data::Dumper;
use MIME::Lite;

my %opts;
getopts('afdt:T:C:c:p:c:hL',\%opts);
my $period = $opts{'p'} || 'hourly';
my $throttle = $opts{'T'} || 'medium';
my $threads = $opts{'t'};
my $cron_tool = $opts{'C'} || '/opt/cif/bin/cif_feedparser';
my $first_run = $opts{'f'};
my $debug = $opts{'d'};
my $mutex = $opts{'L'} || '/tmp/cif_crontool.lock.'.$period;


$SIG{__DIE__} = 'cleanup';
$SIG{'INT'} = 'cleanup';

sub cleanup {
    my $msg = shift;
    if($msg){
        print $msg."\n";
    } else {
        print "\n\nCaught Interrupt (^C), Aborting\n";
    }
    remove_lock();
    exit(1);
}

my @files;
my $feedsdir = '/opt/cif/etc';
unless($opts{'c'}){
    opendir(F,$feedsdir) || die($!);
    @files = sort { $a cmp $b } grep(/.cfg$/,readdir(F));
    close(F);
} else {
    push(@files,$opts{'c'});
}

my @crons;
foreach(@files){
    my $cc_name = $feedsdir.'/'.$_;
    my $cc = Config::Simple->new($cc_name) || die('failed to open: '.$cc_name.': '.$!);
    my @sections = keys %{$cc->{'_DATA'}};
    foreach my $sec (@sections){
        next if($sec =~ /^default/);
        my $skip = $cc->param(-block => $sec)->{'disabled'};
        next if($skip);
        my $tool = $cc->param(-block => $sec)->{'cron_tool'};
        if($first_run){
            my $f = $cc->param(-block => $sec)->{'first_run'};
            next unless($f  && $f eq 'true');
        } else {
            next if($tool && $tool eq 'false');
            my $cron_period = $cc->param(-block => $sec)->{'period'} || 'hourly';
            next unless($cron_period eq $period);
        }
        my $h = {
            feed    => $sec,
            config  => $cc_name,
            tool    => $tool,
        };
        push(@crons,$h);
    }
}

my @feeds = map { $_->{'config'}.' -- '.$_->{'feed'} } @crons;
my $f = join("\n",@feeds);
if($opts{'h'}){
    print usage();
    exit(0);
}
sub usage {
    return <<EOF;
Usage: $0 -p hourly
    -h  --help:     this message
    -f  --first:    "first load", run through the configs where first_run = true
                    don't do NS resolution on domains
    
    -p  --period:   which period to run (hourly, daily, monthly, default: $period)
    -d  --debug:    debug
    -L  --lock:     path for the mutex to go (default: $mutex);
    -T  --throttle: throttle (how man threads to use, default: $throttle)
                    low:    threads = 1/2 number of cores
                    medium: threads = number of cores
                    high:   threads = 2x number of cores

Examples:
    $0 -T high -f -d
    $0 -T medium -p daily 

Current Feeds:
$f
EOF
} 

if(-e $mutex){
    print 'already running, mutex found: '.$mutex."\n" if($debug);
    exit(-1);
}
my $ret = system('touch '.$mutex);
unless(defined($ret) && $ret == 0){
    die($!);
}
foreach(@crons){
    my $c_tool = $_->{'tool'} || $cron_tool;
    my $cmd = $c_tool.' -c '.$_->{'config'}.' -f '.$_->{'feed'};
    if($threads){
        $cmd .= ' -t '.$threads;
    } else {
        $cmd .= ' -T '.$throttle;
    }
    $cmd .= ' -F' if($first_run);
    warn $cmd if($debug);
    my $ret = system($cmd);
    warn $ret if($debug);
#    unless(defined($ret) && $ret == 0 || $ret == 11){
#        warn 'retrying...' if($debug);
#        $ret = system($cmd);
        die($!) unless(defined($ret) && $ret == 0 || $ret == 11);
#    }
}
remove_lock();

sub bail {
    my $msg = shift;
    if(-e '/tmp/.cif_crontool.err'){
        print $msg."\n";
    } else {
        my $msg = MIME::Lite->new(
            From    => 'CIF',
            To      => $opts{'a'} || 'root',
            Subject => 'cif_crontool failure',
            Data    => $msg || 'unknown',
        );
        $msg->send();
        system('touch /tmp/.cif_crontool.err');
    }
    die($msg);
}

sub exit {
    print "\n\nCaught Interrupt (^C), Aborting\n";
    remove_lock();
    exit(1);
}

sub remove_lock {
    system('rm '.$mutex);
}
