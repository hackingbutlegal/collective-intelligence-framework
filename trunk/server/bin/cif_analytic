#!/usr/bin/perl

use strict;
use warnings;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use Data::Dumper;
use Config::Simple;
use Getopt::Std;
use threads;
use threads::shared;
require CIF::Client;

my %opts;
getopts('M:z:m:b:hdT:c:D:t:a:G:', \%opts);
our $debug = $opts{'d'};

my $config = $opts{'c'} || $ENV{'HOME'}.'/.cif';
$config = Config::Simple->new($config) || die 'missing config';
my $cfg = $config->param(-block => 'cif_analytic');

my $max         = $opts{'m'} || $cfg->{'max_batch'} || 100;
my $throttle    = $opts{'T'} || $cfg->{'throttle'} || 'low';
my $max_backoff = $opts{'b'} || $cfg->{'backoff'} || 30;
my $detecttime  = $opts{'D'} || $cfg->{'detecttime'};
my $goback      = $opts{'G'} || 60;
my $threads     = $opts{'t'};
my $mutex       = $opts{'M'} || $cfg->{'mutex'} || '/tmp/cif_analytic.lock';
my $admin       = $opts{'A'} || $cfg->{'admin'} || 'root';
my $disabled    = $opts{'z'} || $cfg->{'disabled'};

die usage() if($opts{'h'});

$SIG{'INT'} = \&cleanup;
$SIG{__DIE__} = \&cleanup;
$SIG{'INT'} = $SIG{'KILL'};
$mutex = 0;

# work-around SIGALRM issue
# http://www.nntp.perl.org/group/perl.ithreads/2003/10/msg762.html
$SIG{ALRM} = sub { warn "Alarm clock\n" };

sub cleanup {
    my $msg = shift;
    if($msg){
        print $msg."\n";
    } else {
        print "\n\nCaught Interrupt (^C), Aborting\n";
    }
    remove_lock();
    exit(1);
}

sub log_error {
    my $msg = shift;
    my ($pkg,$file,$line,$sub,$hash) = caller(/5/);

## TODO -- fix threading issues with this and Class::DBI
#    use CIF::Archive;
#    my $ret = CIF::Archive->insert({
#        'package'       => $pkg,
#        'file'          => $file,
#        'line'          => $line,
#        'message'       => $msg,
#        'description'   => 'analytics log entry',
#        detecttime      => time(),
#    });
    unless($debug){
        mail_log({
            message => $msg,
        });
    }
}

sub mail_log {
    my $args = shift;
    my $uuid = $args->{'uuid'} || '';
    my $msg = $args->{'message'} || 'unknown';
    my $m = MIME::Lite->new(
        From    => $opts{'F'} || 'root',
        To      => $opts{'A'} || 'root',
        Subject => 'cif_analytic log entry: '.$uuid,
        Data    => $msg,
    );
    $m->send();
}

sub remove_lock {
    system('rm '.$mutex);
}

if(-e $mutex){
    print 'already running, mutex found: '.$mutex."\n" if($debug);
    exit(-1);
}
if($mutex && $mutex ne ''){
    my $ret = system('touch '.$mutex);
    unless(defined($ret) && $ret == 0){
        log_error($!);
        die;
    }
}

sub usage {
    return <<EOF;
Usage: perl $0 -c ~/.cif -d -T medium -m 500
    -h  --help:         this message
    -d  --debug:        enable debugging
    -m  --max:          max batch of records per cycle, default: $max
    -T  --throttle:     cpu threading throttle (high,medium,low) default: $throttle
                        high    = 1.5xCores
                        medium  = Cores
                        low     = 0.5xCores
    -b  --backoff:      when there's nothing to do, what's the max time (in seconds)
                        the analytics process should back-off (or slowdown), default: $max_backoff
EOF
}

require CIF::Archive::Analytic;
my @plugs = CIF::Archive::Analytic->plugins();

my $backoff = 1;
do {
    # we do this in a thread to avoid memory leaks in CIF::Archive
    my $res = threads->create('get_recs')->join();
    if($res){
        warn 'processing: '.(scalar(@{$res})).' recs' if($debug);
        threads->create('process',$res)->join();
    }
    unless($res){
        $backoff = ($backoff * 2) unless($backoff >= $max_backoff);
        warn 'backing off: '.$backoff if($debug);
        sleep($backoff);
    } else {
        $backoff = 1;
    }
} until($backoff > $max_backoff);

remove_lock();
exit(0);

sub get_recs {
    require CIF::Archive::Analytic;
    my $ret = CIF::Archive::Analytic->start_run({
        description => 'analytics run start',
        max         => $max,
    });
    return($ret);
}

sub process {
    my $recs = shift;

    require CIF::Utils;
    # more thread-safe this way
    my $tc = CIF::Utils::throttle($throttle);
    # override for debugging
    $tc = $threads if($threads);
    if($tc == 1){
        # don't thread out if there's only one batch
        return _process($recs);
        # go nuts...
    }
    my $batches = CIF::Utils::split_batches($tc,$recs);
    foreach(@{$batches}){
        my $t = threads->create('_process',$_);
    }
    while(threads->list()){
        my @joinable = threads->list(threads::joinable);
        unless($#joinable > -1){
            sleep(1);
            next();
        }
        foreach(@joinable){
            $_->join();
        }
    }
}

sub _process {
    my $recs = shift;

    require CIF::Archive;
    my $archive = CIF::Archive->new();
    $archive->db_Main->{'AutoCommit'} = 0;

    if($disabled){
        if(ref($disabled) eq 'ARRAY'){
            foreach my $d (@$disabled){
                $d = lc($d);
                foreach my $p (@plugs){
                    my $pp = lc($p);
                    if($pp =~ /$d$/){
                        @plugs = grep(!/$p/,@plugs);
                    }
                }
            }
        } else {
            foreach my $p (@plugs){
                my $pp = lc($p);
                $disabled = lc($disabled);
                if($pp =~ /$disabled$/){
                    @plugs = grep(!/$p/,@plugs);
                }
            }
        }
    }

    warn 'detecttime: '.@{$recs}[0]->{'detecttime'} if($debug);
    foreach(@$recs){
        foreach my $p (@plugs){
            my $r = eval { $p->process($_,$config,$archive) };
            log_error($@) if($@);
        }
    }
    warn 'committing....' if($debug);
    $archive->dbi_commit();
}
