package CIF::Message::Malware;
use base 'CIF::Archive';

use strict;
use warnings;

use CIF::Message;

__PACKAGE__->table('malware');
__PACKAGE__->columns(Primary => 'id');
__PACKAGE__->columns(All => qw/id uuid description source hash_sha1 hash_md5 content impact confidence severity restriction alternativeid alternativeid_restriction detecttime created/);
__PACKAGE__->columns(Essential => qw/id uuid description hash_sha1 hash_md5 restriction created/);
__PACKAGE__->sequence('malware_id_seq');

sub insert {
    my $self = shift;
    my $info = shift;
    
    my $uuid            = $info->{'uuid'};

    unless($uuid){
        $uuid = CIF::Message->insert($info);
        $uuid = $uuid->uuid();
    }

    my $id = eval { $self->SUPER::insert({
        uuid    => $uuid,
        description => lc($info->{'description'}),
        source      => $info->{'source'},
        hash_md5    => $info->{'hash_md5'},
        hash_sha1   => $info->{'hash_sha1'},
        content     => $info->{'content'},
        impact      => $info->{'impact'},
        confidence  => $info->{'confidence'},
        severity    => $info->{'severity'},
        restriction => $info->{'restriction'} || 'private',
        detecttime  => $info->{'detecttime'},
        alternativeid   => $info->{'alternativeid'},
        alternativeid_restriction => $info->{'alternativeid_restriction'} || 'private',
    }) };
    if($@){
        die $@ unless($@ =~ /duplicate key value violates unique constraint/);
        $id = $self->retrieve(uuid => $uuid);
    }
    return($id);
}

sub lookup {
    my ($self,$query,$source,$limit,$nolog) = @_;
    $limit = 5000 unless($limit);
    my $description = 'search '.$query;
    my $dt = DateTime->from_epoch(epoch => time());
    $dt = $dt->ymd().'T'.$dt->hour().':00:00Z';

    my $htype = (length($query) == 32) ? 'hash_md5' : 'hash_sha1';
    my $sql = qq{
        WHERE lower($htype) = '$query'
        ORDER BY detecttime DESC, created DESC, id DESC
        LIMIT $limit
    };
    my @recs = $self->retrieve_from_sql($sql);
    return @recs if($nolog);

    my $t = $self->table();
    $self->table($t.'_search');
    my $sid = $self->insert({
        $htype  => $query,
        impact  => 'search',
        source  => 'api'.$source,
        description => $description,
        detecttime  => $dt,
    });
    $self->table($t);
    return @recs;
}

1;

__END__
