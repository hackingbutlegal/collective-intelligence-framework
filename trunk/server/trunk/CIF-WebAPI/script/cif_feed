#!/usr/bin/perl -w

use strict;

use Getopt::Std;
use CIF::Client;
use JSON;
use Data::Dumper;
use File::Copy;

my %opts;
getopt('hdq:f:c:o:', \%opts);
die(usage()) if($opts{'h'});

my $debug = ($opts{'d'}) ? 1 : 0;
my $c = $opts{'c'} || $ENV{'HOME'}.'/.cif';
my $feed = $opts{'f'} || die(usage());
my $timeout = $opts{'t'} || 60;
my $output = $opts{'o'};

sub usage {
    return <<EOF;
Usage: perl $0 -f infrastructure/networks
    -h  --help:     this message
    -d  --debug:    debug output
    -f  --feed:     feed url (infrastructure, domains, malware, urls, etc)
    -t  --timeout:  request timeout (defaults to 60
    -o  --output:   output to file

    configuration file ~/.cif should be readable and look like:

    url=https://example.com:443/api
    apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx

Examples:
    \$> perl $0 -f infrastructure -o /tmp/feeds/infrastucture.feed
    \$> perl $0 -f infrastructure/networks -o /tmp/feeds/nfrastructure_networks.feed
    \$> perl $0 -f domains -o /tmp/feeds/domains.feed
    \$> perl $0 -f domains/nameservers -o /tmp/feeds/domains_nameservers.feed

EOF
}

open(F,$c) || die('could not read configuration file: '.$c.' '.$!);

my ($apikey,$url);
while(<F>){
    my ($o,$v) = split(/=/,$_);
    $url = $v if(lc($o) eq 'url');
    $apikey = $v if(lc($o) eq 'apikey');
}
$url =~ s/\n//;
$apikey =~ s/\n//;
close(F);

my $client = CIF::Client->new({
    host        => $url,
    timeout     => $timeout,
    apikey      => $apikey,
});

$client->GET('/'.$feed.'?apikey='.$client->apikey());
die('request failed with code: '.$client->responseCode()) unless($client->responseCode == 200);

my $resp = $client->responseContent();
my $hash = from_json($resp);
my @res = @{$hash->{'data'}->{'result'}};
if($#res >= 0){
    if($output){
        open(F,'>'.$output.'.tmp') || die($!);
        print F to_json(\@res);
        close(F);
        move($output.'.tmp',$output);        
    } else {
        print to_json(\@res) if($#res >= 0);
    }
}
