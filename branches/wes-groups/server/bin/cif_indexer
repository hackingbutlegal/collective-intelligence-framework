#!/usr/bin/perl 

use strict;
use warnings;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use threads;
use Getopt::Std;
use Data::Dumper;

my %opts;
getopts('p:t:m:M:s:dhS:',\%opts);

our $debug      = $opts{'d'};
my $set_limit   = $opts{'s'} || 150000;
my $min         = $opts{'m'};
my $max         = $opts{'M'};
my $threads     = $opts{'t'} || 8;
my $plug        = $opts{'p'} || die('missing plugin to run');
my $schema      = $opts{'S'} || 'cif_new';

my $bail = 0;
$SIG{'INT'} = sub {
    print "nCaught Interrupt (^C), Aborting\n";
    $bail++;
    if($bail > 1){
        exit(-1);
    }
};

my $ret = threads->create('get_minmax')->join();

$min = $ret->{'min'} unless($min);
$max = $ret->{'max'} unless($max);

die 'missing min' unless($min);
die 'missing max' unless($max);

my $sets = int(($max - $min) / $set_limit) + 1;
$threads = $sets if($sets < $threads);
foreach (0 ... $sets){
    if($set_limit > ($max-$min)){
        $set_limit = ($max-$min);
    }
    my $end = $min+$set_limit;
    threads->create('run_set',$min,$end)->join();
    $min = ($min+$end+1);
    last if($min >= $max);
}

sub run_set {
    my ($start,$end) = @_;
    my @joinable;
    my $t;
    do {
        while(scalar(threads->list()) >= $threads){
            @joinable = threads->list(threads::joinable);
            if($#joinable > -1){
                foreach(@joinable){
                    $_->join();
                    $t--;
                }
            } else {
                sleep(1);
                next();
            }
        }
        my $batch = ($end - $start) / $threads;
        threads->create(\&process,$start,($start+$batch));
        $start += $batch+1;
    } while($start <= $end && !$bail);
    
    while(threads->list()){
        @joinable = threads->list(threads::joinable);
        if($#joinable > -1){
            foreach(@joinable){
                $_->join();
            }
        } else {
            sleep(1);
        }
    }
}

sub process {
    my ($start,$end) = @_;
    warn "$start -- $end";

    require CIF::Archive;
    eval "require $plug";
    my $t = $plug->table();
    $plug->table($t.'_new');

    foreach($start ... $end){
        $_ = CIF::Archive->retrieve(id => $_);
        next unless($_);
        my @recs = @{$_->data_hash_simple()};
        foreach my $r (@recs){
            my $id = $plug->insert($r);
            warn $id;
        }   
    }

}

sub get_minmax {
    require CIF::Archive;
    my $min = CIF::Archive->minimum_value_of('id');
    my $max = CIF::Archive->maximum_value_of('id');

    return({
        min => $min,
        max => $max,
    });
}
