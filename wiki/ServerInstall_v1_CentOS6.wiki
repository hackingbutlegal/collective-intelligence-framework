#summary centos 6 install doc (v1)

= Introduction =

This doc assumes a base CentOS6 x64 minimal base install.

* Table of Contents *
<wiki:toc max_depth="3" />

= Details =
== SELINUX ==
Selinux either needs to be disabled or a [http://wiki.centos.org/HowTos/SELinux policy] needs to be written allowing postgres r/w access to /mnt/archive and /mnt/index
 # disable selinux via /etc/selinux/config
{{{
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=permissive
}}}
 # restart the server for the kernel changes to take effect

== Dependencies Installation ==
----
 # make sure you have sudo installed
 # install server dependencies (as root)
{{{
$ yum install sudo rng-tools postgresql-server httpd httpd-devel mod_ssl gcc make expat expat-devel mod_perl mod_perl-devel perl-Digest-SHA perl-Digest-SHA libxml2 libxml2-devel perl-XML-LibXML uuid-perl perl-DBD-Pg bind perl-XML-RSS perl-JSON rsync perl-Unicode-String perl-Config-Simple perl-Module-Pluggable perl-MIME-Lite perl-CPAN perl-Class-Accessor perl-YAML perl-XML-Parser uuid uuid-devel uuid-perl perl-Net-DNS perl-DateTime-Format-DateParse perl-IO-Socket-INET6 openssl-devel perl-Module-Install wget perl-Net-SSLeay perl-Class-Trigger perl-Date-Manip libuuid-devel perl-IO-Socket-SSL
}}}
 # install some 3rd party dependencies
{{{
$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/libapreq2-2.13-1.el6.x86_64.rpm
$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/libapreq2-devel-2.13-1.el6.x86_64.rpm
$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/perl-libapreq2-2.13-1.el6.x86_64.rpm
$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/zeromq-2.1.9-1.el6.x86_64.rpm
$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/zeromq-devel-2.1.9-1.el6.x86_64.rpm
$ sudo rpm -i libapreq2-2.13-1.el6.x86_64.rpm libapreq2-devel-2.13-1.el6.x86_64.rpm perl-libapreq2-2.13-1.el6.x86_64.rpm zeromq-2.1.9-1.el6.x86_64.rpm zeromq-devel-2.1.9-1.el6.x86_64.rpm
}}}
 # install the remaining CPAN modules (PERL_MM_USE_DEFAULT=1 will auto "yes" to the prompts)
{{{
$ sudo PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'install Net::Abuse::Utils,Linux::Cpuinfo,Google::ProtocolBuffers,Iodef::Pb::Simple,Compress::Snappy,Net::Abuse::Utils::Spamhaus,Net::DNS::Match,Snort::Rule,Parse::Range,Log::Dispatch,ZeroMQ,Sys::MemInfo,JSON::XS,File::Type,LWP::UserAgent,Class::Trigger,Class::DBI,Net::Patricia,Text::Table,Mozilla::CA,IO::Socket::SSL,IO::Socket::INET6,LWP::Protocol::https'
}}}
 # Net-SSLeay > 1.49 has some build issues and perl-Net-SSLeay that comes with CentOS6 is too old, therefore we must install 1.49 manually:
{{{
$ wget http://search.cpan.org/CPAN/authors/id/M/MI/MIKEM/Net-SSLeay-1.49.tar.gz
$ tar -zxvf Net-SSLeay-1.49.tar.gz
$ cd Net-SSLeay-1.49
$ perl Makefile.PL
$ sudo make install
}}}
 # IO::Socket::INET6 needs to be installed manually (with force)
{{{
$ wget http://search.cpan.org/CPAN/authors/id/S/SH/SHLOMIF/IO-Socket-INET6-2.69.tar.gz
$ tar -zxvf IO-Socket-INET6-2.69.tar.gz
$ cd IO-Socket-INET6-2.69
$ perl Makefile.PL && sudo make install
}}}
 # install LWP::Protocol::https by itself (it needs the INET6 update to install properly at the moment)
{{{
sudo PERL_MM_USE_DEFAULT=1 perl -MCPAN -e 'install LWP::Protocol::https'
}}}

== System Setup ==
----
=== Resolve Config ===
We need to point our dns resoultion to the our local nameserver instance.
 # modify /etc/sysconfig/network-scripts/ifcfg-eth0 with the following DNS1="127.0.0.1" line
{{{
echo "DNS1=127.0.0.1" >> /etc/sysconfig/network-scripts/ifcfg-eth0
}}}
 # restart networking
{{{
$ sudo /etc/init.d/network restart
}}}

=== Postgres ===
 # init the main cluster
{{{
$ sudo service postgresql initdb
}}}
 # The default installation of Postgres is a little out of sync with the rest of the doc, we need to do some symlinking
{{{
$ sudo mkdir -p /etc/postgresql/8.4/main
$ sudo chown -R postgres:postgres /etc/postgresql
$ sudo chmod 760 -R /etc/postgresql
$ sudo ln -sf /var/lib/pgsql/data/postgresql.conf /etc/postgresql/8.4/main/postgresql.conf
$ sudo ln -sf /var/lib/pgsql/data/pg_hba.conf /etc/postgresql/8.4/main/pg_hba.conf
}}}
 # start up the cluster
{{{
$ sudo service postgresql start
}}}
=== Default CIF user ===
----
 # create your "cif" user/group (the configure script will default to this user "cif")
{{{
$ sudo adduser cif
}}}
 # change the default home permissions
{{{
$ sudo chmod 770 /home/cif
}}}

=== CIF Router Configuration (Apache) ===
----
Some of the "CIF" values will be created later in the doc, for now just follow the config as is, don't worry about creating things like "/home/cif" etc.
 # if you need help generating your own certificates, follow the directions [http://wiki.centos.org/HowTos/Https here]
 # unless you know what you're doing with virtual hosts, comment out the port-80 stuff in /etc/httpd/conf/httpd.conf (line 130 or so)
{{{
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, in addition to the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to
# prevent Apache from glomming onto all bound IP addresses (0.0.0.0)
#
#Listen 12.34.56.78:80
+ #Listen 80
}}}
 # configure httpd, add these lines to your /etc/httpd/conf.d/ssl.conf config (line 74 or so)
{{{
<VirtualHost _default_:443>
+      PerlRequire /opt/cif/bin/http_api.pl
+      Include /etc/httpd/conf.d/cif.conf
....
}}}
 # create your config at /etc/httpd/conf.d/cif.conf, which should look like:
{{{
<Location /api>
    SetHandler perl-script
    PerlResponseHandler CIF::Router::HTTP
    PerlSetVar CIFRouterConfig "/home/cif/.cif"
</Location>

}}}
 # add your "apache" user to the group "cif" (this modifies /etc/group):
{{{
$ sudo usermod -a -G cif apache
}}}
 # we'll restart apache later in the doc after we install the core CIF code
=== Random Number Generator ===
----
The "rngd' service [https://www.centos.org/modules/newbb/viewtopic.php?topic_id=36209 helps] with random number generation (mainly used for generating security certificates in bind and apache, speeds up the entropy process).
 # modify /etc/sysconfig/rngd to use /dev/urandom as the seed
{{{
# Add extra options here
EXTRAOPTIONS="-r /dev/urandom"
}}}
 # restart rngd
{{{
$ sudo service rngd restart
}}}
=== Finishing Up ===
----
 # enable services at startup
{{{
$ sudo chkconfig --levels 345 postgresql on
$ sudo chkconfig --levels 345 named on
$ sudo chkconfig --levels 345 rngd on
$ sudo chkconfig --levels 345 httpd on
}}}

*Continue with [ServerInstall_v1_RC2#Bind Nameserver configuration]*