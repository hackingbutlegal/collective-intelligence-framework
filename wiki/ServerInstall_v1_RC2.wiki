#summary the Server Installation (v1)

* Before you Begin *
 * If you've never used CIF before, *STOP RIGHT HERE*, please see the [ServerInstall_v0 v0 installer] which is considered stable
 * From this point on, ignore all other doc (including any client side doc), this page includes all the doc required to test v1 and it could conflict with other doc creating confusion, pain and potential alcohol abuse..

* Table of Contents *
<wiki:toc max_depth="3" />

= Preamble =
== Changes==
=== RC2 === 
 * merged everything under the cif-v1 tree in github (cif-router, etc are all submodules)
 * cleaned up the installer as one automake "meta installer"
 * (libcif-dbi) split out asn, cc and rir support as non-default options (save space)
 * (cif-router) added legacy JSON keypair query/submission support (on by default)
 * cleaned up some of the configs
 * (cif-smrt) added proxy support
 * (cif-smrt) re-mapped detecttime to reporttime (more accurate)
 * (cif-test-framework) added to do basic i/o tests for new installations
 * (libcif) re-factored the client a bit, more plugabble for various query / transport types
 * (libcif) back-ported the 'advanced config' from cif-v0
 * (libcif) re-factored and added to the debug / logging functions
 * (rt-cifminimal) updated to work with cif-v1
 * other various performance enhancements
=== RC1 ===
 * renamed cif-perl to libcif
 * renamed cif-dbi-perl to libcif-dbi
 * merged cif-client to libcif
 * libcif now provides (implements) cif-protocol
 * libcif now provides HTTP transport
 * renamed cif-router-perl to cif-router
 * renamed cif-smrt-perl to cif-smrt
 * misc bugfixes to cif-smrt
 * migrated Iodef::Pb to be auto-generated and implemented in Iodef::Pb::Simple
 * added simple access control to feed data-types (eg: domain, infrastructure, malware) based on apikey (eg: key can only access one of the feeds if you allow it, no query)

=== beta3 ===
 * re-architected cif-smrt for better memory + thread support via ZeroMQ
 * merged cif_analytics into cif-smrt as "postprocessors", disabled by default, enabled by use of the '-P' flag in cif_smrt
 * improved feed generation support
 * removed direct "dbi" database integration, now uses submission support in cif-client and cif-router
 * added submission support to cif-router
 * added key expiration to cif-router / cif-apikeys

=== beta2 ===
 * re-architected how feeds are generated (enabled only)
 * re-architected how ip-addresses are index'd (removed strict postgres dep)

=== beta1 ==
 * Moved from JSON to Google Protocol Buffers (protobuf)
 * added compression (compress-snappy)
 * enabled remote database connectivity
 * split out:
  * cif-perl (core cif messaging protocol)
  * cif-dbi-perl (core database interface)
  * cif-smrt (formally cif_feedparser)
  * cif-router (formally CIF::WebAPI)
 * turned cif-router into a driver framework (eg: HTTP, ZeroMQ are just plugins and can be swapped out)
 * simplified the CIF::Router api (removed severity and restriction from the api)
 * simplified the query data model, most things are now just sha1 hash lookups (with the exception of ipv4/6 addresses)
 * less "index" tables to swap in and out of memory, faster lookups, ip-addr's will follow in upcoming beta's

== Known Issues ==
 * You *cannot* run this beta on the same box as CIF v0, it will break stuff, you will loose your data, you will be angry with me.
 * If you are installing on top of any of the previous CIF v1 releases, you *must drop* your cif v1 database before installing this release candidate.
 * If you are installing on a machine with less than 4 GB of ram you need to read the "note:" section under Postgres Setup Performance Tuning. 

= System Requirements =
These requirements will handle everything on the same box pretty well with the default open source data-sets. The more (bigger) data-sets you add, the more ram / disk space you'll need. The more cores you add, the more threads that can "batch out" the feed parsers (thus, resulting in faster data consumption).

These specs will handle around 10k feeds at once with minimal impact on memory usage. Past that you'll need to start doubling your specs. Virtual machine technology is great for prototyping your implementation and will give you a good baseline of what you'll need for production.

 # an x86-64bit platform
 # at-least 4GB ram
 # at-least 2 cores
 # at-least 100GB of free (after OS install) disk space, which should allow you to retain a years worth of data.

= Prerequisites =
 # [DiskLayout_v1 DiskLayout]
== System Deps ==
=== Standard Deps ===
==== Stable ====
 * [ServerInstall_v1_Squeeze Debian Squeeze]
==== Unstable ====
 * [ServerInstall_v1_Ubuntu Ubuntu]
 * [ServerInstall_v1_CentOS6 CentOS 6]
 * [ServerInstall_v1_Generic From Source]

=== Non Standard Deps ===
 # [InstallZeroMQ_v1 InstallZeroMQ]

=== Configuration ===

==== Postgres ====
Configure Postgres authentication and performance tuning
 # [PostgresInstall_v1 PostgresSetup]

==== Bind ====
These scripts do a lot of dns queries. You're gonna wanna install bind and configure it to use forwarders. Maybe something like google public dns to help mask your queries. Then point your resolv.conf "nameserver" setting to 127.0.0.1 (in ubuntu this could be in /etc/resolvconf/resolv.conf.d/base)
 # BindSetup

= Server =
== Disk Layout ==
 # create the index / archive table spaces if you haven't via [DiskLayout_v1 DiskLayout] already (it's OK if you don't want to use LVM, these directories can exist on your root volume if you choose, but performance will increase if these are spread out across many disks):
{{{
$ sudo mkdir /mnt/archive
$ sudo mkdir /mnt/index
$ sudo chown postgres:postgres /mnt/index
$ sudo chown postgres:postgres /mnt/archive
$ sudo chmod 770 /mnt/index
$ sudo chmod 770 /mnt/archive
}}}
== Default User ==
 # create your "cif" user/group (the configure script will default to this user "cif")
{{{
$ sudo adduser --disabled-password --gecos '' cif
}}}
== Install ==
 # the latest packages can be pulled from [http://collective-intelligence-framework.googlecode.com/files/cif-v1-rc2.tar.gz here]
{{{
$ wget http://collective-intelligence-framework.googlecode.com/files/cif-v1-rc2.tar.gz
$ tar -xvf cif-v1-rc2.tar.gz
$ cd cif-v1-rc2
$ ./configure && make testdeps
$ sudo make install
$ sudo make initdb
}}}
== Configuration ==
=== Profile ===
 # log in as the cif user:
{{{
$ sudo su - cif
}}}
 # modify your local path, vi ~/.profile
{{{
if [ -d "/opt/cif/bin" ]; then
    PATH="/opt/cif/bin:$PATH"
fi
}}}
 # reload your env
{{{
$ source ~/.profile
}}}
=== Basic Configuration ===
 # log into the cif user:
{{{
$ sudo su - cif
$ vi ~/.cif
}}}
 # edit ~/.cif using this as a template, the API KEYS will be generated in the next section, for now just use the XXX as the placeholders.
{{{
# the simple stuff
[cif_archive]
datatypes = infrastructure,domain,url,email,search,malware

# enable your own groups is you start doing data-sharing with various groups
#groups = everyone,group1.example.com,group2.example.com,group3.example.com

# enable this if you plan to generate feeds, other-wise it'll save you space
# queries will still work with this disabled, you only need it if you leverage the cif_feed command
#feeds = infrastructure,domain,url,email,search,malware

[cif_smrt]
# change example.com to your local domain and hostname respectively
# this identifies the data in your instance and ties it to your specific instance in the event
# that you start sharing with others
name = example.com
instance = cif.example.com

# the apikey for cif_smrt
apikey = XXXXXX-XXX-XXXX 

[client]
# the apikey for your client
apikey = XXXXXX-XXX-XXXX

[client_http]
host = https://localhost:443/api
verify_tls = 0

# advanced stuff

[db]
host = 127.0.0.1
user = postgres
password =
database = cif

# if you enable feed generation
[cif_feed]
# max size of any feed generated
limit = 50000

# each confidence level to generate
confidence = 95,85,75,65

# what 'role' keys to use to generate the feeds
roles = everyone

# how far back in time to generate the feeds from
max_days = 7

# if the normal IODEF restriction classes don't fit your needs
[restriction_map]
#public = limited
#need-to-know = amber
#private = red
}}}
=== APIKey ===
 # generate your initial apikey to be used by your client
{{{
$ cif_apikeys -u myuser@mydomain.com -a -g everyone -G everyone
userid              key                                  description guid                                 default_guid access write revoked expires created                      
myuser@mydomain.com 249cd5fd-04e3-46ad-bf0f-c02030cc864a             8c864306-d21a-37b1-8705-746a786719bf true         all                          2012-08-01 11:50:15.969724+00
}}}
 # check to make sure your 'guid' has _*8c864306-d21a-37b1-8705-746a786719bf*_ in it. If it doesn't you won't be able to see all the default, public data that's permissioned to the 'everyone' group in your system
 # generate a cif-smrt key to be used by cif_smrt to submit data to the router:
{{{
$ cif_apikeys -u cif_smrt -G everyone -g everyone -a -w
userid   key                                  description guid                                 default_guid restricted access write revoked expires created                      
cif_smrt bf1e0a9f-9518-409d-8e67-bfcc36dc5f44             8c864306-d21a-37b1-8705-746a786719bf true         0                 1                     2012-08-15 17:37:18.53348+00 
}}}
 # to list all of your apikeys:
{{{
$ cif_apikeys -l
}}}
 # cif_apikeys -h will give you an example of how to use the tool
 # log out of the cif user into your regular user (that has sudo access)

=== Apache2 ===
 # enable the default-ssl site (debian):
{{{
$ sudo a2ensite default-ssl
$ sudo a2enmod apreq
$ sudo a2enmod ssl
}}}
 # unless you know what you're doing with virtual hosts, comment out the port-80 stuff in /etc/apache2/ports.conf
{{{
# If you just change the port or add more ports here, you will likely also
# have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default
# This is also true if you have upgraded from before 2.2.9-3 (i.e. from
# Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and
# README.Debian.gz

+ #NameVirtualHost *:80
+ #Listen 80

<IfModule mod_ssl.c>
    # If you add NameVirtualHost *:443 here, you will also have to change
    # the VirtualHost statement in /etc/apache2/sites-available/default-ssl
    ...
}}}
 # configure apache2, add this line to your default-ssl site (or default if you're not using TLS)
{{{
<IfModule mod_ssl.c>
<VirtualHost _default_:443>
+      PerlRequire /opt/cif/bin/http_api.pl
+      Include /etc/apache2/cif.conf
....
}}}
 # create your config at /etc/apache2/cif.conf, which should look like:
{{{
<Location /api>
    SetHandler perl-script
    PerlResponseHandler CIF::Router::HTTP
    PerlSetVar CIFRouterConfig "/home/cif/.cif"
</Location>

}}}
 # add your "www-data" user (whoever apache is set to run under) to the group "cif" (/etc/group):
{{{
$ sudo adduser www-data cif
}}}
 # restart apache2
 # re-login as the cif user and test your connectivity to the router:
{{{
$ sudo su - cif
$ cif -d -q example.com
[DEBUG][2012-12-20T15:18:34Z]: generating query
[DEBUG][2012-12-20T15:18:34Z]: query: example.com
[DEBUG][2012-12-20T15:18:34Z]: sending query
[DEBUG][2012-12-20T15:18:35Z]: decoding...
[DEBUG][2012-12-20T15:18:35Z]: processing: 2 items
[DEBUG][2012-12-20T15:18:35Z]: final results: 2
[DEBUG][2012-12-20T15:18:35Z]: done processing
[DEBUG][2012-12-20T15:18:35Z]: formatting as Table...
WARNING: This table output not to be used for parsing, see "-p plugins" (via cif -h)
WARNING: Turn off this warning by adding: 'table_nowarning = 1' to your ~/.cif config

feed description:   search example.com
feed reporttime:    2012-12-20T15:18:35Z
feed uuid:          fa843602-4f62-49b5-99c0-010d4c873ee3
feed guid:          everyone
feed restriction:   private
feed confidence:    0

restriction|guid    |assessment|description       |confidence|detecttime          |reporttime          |address    |alternativeid_restriction|alternativeid
private    |everyone|search    |search example.com|50        |2012-12-20T15:18:35Z|2012-12-20T15:18:35Z|example.com|                         |             
}}}
== Initial Data Load ==
 # you should be logged in as the 'cif' user for this
 # run the cif_crontool
{{{
$ cd /opt/cif
$ time ./bin/cif_crontool -p hourly -d -P
$ time ./bin/cif_crontool -d -P
}}}
=== Configuring Crontab ===
 # log into the cif user (sudo su - cif) and modify it's cron tab (crontab -e)
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P -N -A root &> /dev/null
30     00      * * * /opt/cif/bin/cif_crontool -p daily -P -N -A root &> /dev/null
}}}

=== Configuring Crontab with logging ===
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P -d -N -A root >> /home/cif/crontool_hourly.log 2>&1
30     00      * * * /opt/cif/bin/cif_crontool -p daily -P -d -N -A root >> /home/cif/crontool_daily.log 2>&1
}}}

== Enabling Feed Generation ==
To enable feed generation, which requires more space a few more options need to be ticked. If you only plan to leverage the system for "querying" (not putting feeds into something like a firewall, etc) then this can be skipped.
 
 # when that's finished, run your first batch of feeds
{{{
$ time /opt/cif/bin/cif_feed -d
}}}