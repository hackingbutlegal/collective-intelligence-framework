#summary the Server Installation (v1)

* Before you Begin *
 * If you've never used CIF before, *STOP RIGHT HERE*, please see the [ServerInstall_v0 v0 installer] which is considered stable
 * From this point on, ignore all other doc (including any client side doc), this page includes all the doc required to test v1 and it could conflict with other doc creating confusion, pain and potential alcohol abuse..

* Table of Contents *
<wiki:toc max_depth="3" />

= Preamble =
----
A semi-complete [ChangeLog_v1 ChangeLog] of v1

=== Known Issues ===
 * You *cannot* run this beta on the same box as CIF v0, it will break stuff, you will loose your data, you will be angry with me.
 * If you are installing on top of any of the previous CIF v1 releases, you *must drop* your cif v1 database before installing this release candidate.
 * If you are installing on a machine with less than 4 GB of ram you need to read the "note:" section under Postgres Setup Performance Tuning. 

= System Requirements =
----
These requirements will handle everything on the same box pretty well with the default open source data-sets. The more (bigger) data-sets you add, the more ram / disk space you'll need. The more cores you add, the more threads that can "batch out" the feed parsers (thus, resulting in faster data consumption).

These specs will handle around 10k feeds at once with minimal impact on memory usage. Past that you'll need to start doubling your specs. Virtual machine technology is great for prototyping your implementation and will give you a good baseline of what you'll need for production.

 * an x86-64bit platform
 * at-least 4GB ram
 * at-least 2 cores
 * at-least 100GB of free (after OS install) disk space, which should allow you to retain a years worth of data.

= Prerequisites =
----
Consult the [DiskLayout_v1 Disk Layout Guide] before setting up your operating system

= 1. Choose a distribution =
----
Choose a distribution as your base install and install the required dependencies.

 * [ServerInstall_v1_Squeeze Debian Squeeze] (unstable)
 * [ServerInstall_v1_Ubuntu Ubuntu 12.04 ] (unstable)
 * [ServerInstall_v1_CentOS6 CentOS 6] (unstable)
 * [ServerInstall_v1_Generic From Source] (unstable)

= 2. Post OS install configuration =
----
=== Postgres ===

Configure Postgres authentication and performance tuning
 # [PostgresInstall_v1 PostgresSetup]

=== Bind ===

Configure Bind to use Google public DNS servers to abstract your CIF instance. Point your resolv.conf "nameserver" setting to 127.0.0.1 (in ubuntu this could be in /etc/resolvconf/resolv.conf.d/base)
 # [BindSetup_v1 BindSetup]

= 3. Installing CIF =
----
=== Disk Layout ===
 # create the index / archive table spaces if you haven't via [DiskLayout_v1 DiskLayout] already (it's OK if you don't want to use LVM, these directories can exist on your root volume if you choose, but performance will increase if these are spread out across many disks):
{{{
$ sudo mkdir /mnt/archive
$ sudo mkdir /mnt/index
$ sudo chown postgres:postgres /mnt/index
$ sudo chown postgres:postgres /mnt/archive
$ sudo chmod 770 /mnt/index
$ sudo chmod 770 /mnt/archive
}}}
=== Default User ===
 # create your "cif" user/group (the configure script will default to this user "cif")
{{{
$ sudo adduser --disabled-password --gecos '' cif
}}}
=== Install ===
 # install the latest package
{{{
$ wget http://collective-intelligence-framework.googlecode.com/files/cif-v1-rc2-00-16-gab18761.tar.gz
$ tar -xzvf cif-v1-XXXX.tar.gz
$ cd cif-v1-rc2-XXXX
$ ./configure && make testdeps
$ sudo make install
$ sudo make initdb
}}}

= 4. CIF configuration =
----
=== Profile ===
 # log in as the cif user:
{{{
$ sudo su - cif
}}}
 # modify your local path, vi ~/.profile
{{{
if [ -d "/opt/cif/bin" ]; then
    PATH="/opt/cif/bin:$PATH"
fi
}}}
 # reload your env
{{{
$ source ~/.profile
}}}
=== Basic Configuration ===
 # as the cif user: (sudo su - cif)
{{{
$ vi ~/.cif
}}}
 # edit ~/.cif using this as a template, the API KEYS will be generated in the next section, for now just use the XXX as the placeholders.
{{{
# the simple stuff
[cif_archive]
datatypes = infrastructure,domain,url,email,search,malware

# enable your own groups is you start doing data-sharing with various groups
#groups = everyone,group1.example.com,group2.example.com,group3.example.com

[cif_smrt]
# change example.com to your local domain and hostname respectively
# this identifies the data in your instance and ties it to your specific instance in the event
# that you start sharing with others
name = example.com
instance = cif.example.com

# the apikey for cif_smrt
apikey = XXXXXX-XXX-XXXX 

[client]
# the apikey for your client
apikey = XXXXXX-XXX-XXXX

[client_http]
host = https://localhost:443/api
verify_tls = 0

# advanced stuff

[db]
host = 127.0.0.1
user = postgres
password =
database = cif

# if the normal IODEF restriction classes don't fit your needs
[restriction_map]
#public = limited
#need-to-know = amber
#private = red
}}}
=== APIKey ===
 # generate your initial apikey to be used by your client
{{{
$ cif_apikeys -u myuser@mydomain.com -a -g everyone -G everyone
userid              key                                  description guid                                 default_guid access write revoked expires created                      
myuser@mydomain.com 249cd5fd-04e3-46ad-bf0f-c02030cc864a             8c864306-d21a-37b1-8705-746a786719bf true         all                          2012-08-01 11:50:15.969724+00
}}}
 # check to make sure your 'guid' has _*8c864306-d21a-37b1-8705-746a786719bf*_ in it. If it doesn't you won't be able to see all the default, public data that's permissioned to the 'everyone' group in your system
 # generate a cif-smrt key to be used by cif_smrt to submit data to the router:
{{{
$ cif_apikeys -u cif_smrt -G everyone -g everyone -a -w
userid   key                                  description guid                                 default_guid restricted access write revoked expires created                      
cif_smrt bf1e0a9f-9518-409d-8e67-bfcc36dc5f44             8c864306-d21a-37b1-8705-746a786719bf true         0                 1                     2012-08-15 17:37:18.53348+00 
}}}
 # to list all of your apikeys:
{{{
$ cif_apikeys -l
}}}
 # cif_apikeys -h will give you an example of how to use the tool
 # log out of the cif user into your regular user (that has sudo access)

=== Apache2 ===
 # enable the default-ssl site (debian):
{{{
$ sudo a2ensite default-ssl
$ sudo a2enmod apreq
$ sudo a2enmod ssl
}}}
 # unless you know what you're doing with virtual hosts, comment out the port-80 stuff in /etc/apache2/ports.conf
{{{
# If you just change the port or add more ports here, you will likely also
# have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default
# This is also true if you have upgraded from before 2.2.9-3 (i.e. from
# Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and
# README.Debian.gz

+ #NameVirtualHost *:80
+ #Listen 80

<IfModule mod_ssl.c>
    # If you add NameVirtualHost *:443 here, you will also have to change
    # the VirtualHost statement in /etc/apache2/sites-available/default-ssl
    ...
}}}
 # configure apache2, add this line to your default-ssl site (or default if you're not using TLS)
{{{
<IfModule mod_ssl.c>
<VirtualHost _default_:443>
+      PerlRequire /opt/cif/bin/http_api.pl
+      Include /etc/apache2/cif.conf
....
}}}
 # create your config at /etc/apache2/cif.conf, which should look like:
{{{
<Location /api>
    SetHandler perl-script
    PerlResponseHandler CIF::Router::HTTP
    PerlSetVar CIFRouterConfig "/home/cif/.cif"
</Location>

}}}
 # add your "www-data" user (whoever apache is set to run under) to the group "cif" (/etc/group):
{{{
$ sudo adduser www-data cif
}}}
 # restart apache2
 # re-login as the cif user and test your connectivity to the router:
{{{
$ sudo su - cif
$ cif -d -q example.com
[DEBUG][2012-12-20T15:18:34Z]: generating query
[DEBUG][2012-12-20T15:18:34Z]: query: example.com
[DEBUG][2012-12-20T15:18:34Z]: sending query
[DEBUG][2012-12-20T15:18:35Z]: decoding...
[DEBUG][2012-12-20T15:18:35Z]: processing: 2 items
[DEBUG][2012-12-20T15:18:35Z]: final results: 2
[DEBUG][2012-12-20T15:18:35Z]: done processing
[DEBUG][2012-12-20T15:18:35Z]: formatting as Table...
WARNING: This table output not to be used for parsing, see "-p plugins" (via cif -h)
WARNING: Turn off this warning by adding: 'table_nowarning = 1' to your ~/.cif config

feed description:   search example.com
feed reporttime:    2012-12-20T15:18:35Z
feed uuid:          fa843602-4f62-49b5-99c0-010d4c873ee3
feed guid:          everyone
feed restriction:   private
feed confidence:    0

restriction|guid    |assessment|description       |confidence|detecttime          |reporttime          |address    |alternativeid_restriction|alternativeid
private    |everyone|search    |search example.com|50        |2012-12-20T15:18:35Z|2012-12-20T15:18:35Z|example.com|                         |             
}}}

== Enabling Feed Generation ==
To enable feed generation, which requires more space a few more options need to be ticked. If you only plan to leverage the system for "querying" (not putting feeds into something like a firewall, etc) then this section can be skipped.

 # modify the 'cif' user's ~/.cif config accordingly:
 # add the following to the cif_archive section:
{{{
[cif_archive]
...
feeds = infrastructure,domain,url,email,search,malware
}}}

 # add this section to the config
{{{
[cif_feed]
# max size of any feed generated
limit = 50000

# each confidence level to generate
confidence = 95,85,75,65

# what 'role' keys to use to generate the feeds
roles = role_everyone

# how far back in time to generate the feeds from
max_days = 7
}}}
 # generate a "role key" for generating feeds everyone (with an apikey) in the system can query for. They apikey generated can be ignored as it's just a placeholder for the system.
{{{
$ cif_apikeys -u role_everyone -G everyone -g everyone -a
}}}

= 5. Initial Data Load =
----

 # you should be logged in as the 'cif' user for this
 # run the cif_crontool
{{{
$ time cif_crontool -p hourly -d -P
$ time cif_crontool -p daily -d -P
}}}

= 6. Testing =
----
=== Query Only ===
If you've setup a query-only system (no feeds), you should be able to run the following to test for data:
{{{
cif@ubuntu:~$ cif -d -M -q google.com
[DEBUG][2012-12-20T16:15:32Z]: generating query
[DEBUG][2012-12-20T16:15:32Z]: query: google.com
[DEBUG][2012-12-20T16:15:32Z]: sending query
[DEBUG][2012-12-20T16:15:32Z]: decoding...
[DEBUG][2012-12-20T16:15:32Z]: processing: 3 items
[DEBUG][2012-12-20T16:15:32Z]: final results: 3
[DEBUG][2012-12-20T16:15:32Z]: done processing
[DEBUG][2012-12-20T16:15:32Z]: formatting as Table...
WARNING: This table output not to be used for parsing, see "-p plugins" (via cif -h)
WARNING: Turn off this warning by adding: 'table_nowarning = 1' to your ~/.cif config

feed description:   search google.com
feed reporttime:    2012-12-20T16:15:32Z
feed uuid:          e7cd9386-cd14-4232-8998-2d89af47ad40
feed guid:          everyone
feed restriction:   private
feed confidence:    0

restriction |guid    |assessment|description      |confidence|detecttime          |reporttime          |address   |alternativeid_restriction|alternativeid                           
need-to-know|everyone|whitelist |alexa #1         |95        |2012-12-20T16:00:00Z|2012-12-20T00:00:00Z|google.com|public                   |http://www.alexa.com/siteinfo/google.com
private     |everyone|search    |search google.com|50        |2012-12-20T15:30:57Z|2012-12-20T15:30:57Z|google.com|                         |                                        

[DEBUG][2012-12-20T16:15:32Z]: done
}}}
=== With Feeds ===
 # if you've setup a system with feeds enabled, first run the cif_feed command to generate the first batch of feeds to test with:
{{{
$ time cif_feed -d
}}}
 # next query for one of the feeds:
{{{
$ time cif -M -d -q infrastructure/scan -c 85
[DEBUG][2012-12-20T16:20:30Z]: generating query
[DEBUG][2012-12-20T16:20:30Z]: query: infrastructure/scan
[DEBUG][2012-12-20T16:20:30Z]: sending query
[DEBUG][2012-12-20T16:20:30Z]: decoding...
[DEBUG][2012-12-20T16:20:30Z]: processing: 475 items
[DEBUG][2012-12-20T16:20:32Z]: final results: 475
[DEBUG][2012-12-20T16:20:32Z]: done processing
[DEBUG][2012-12-20T16:20:32Z]: formatting as Table...
WARNING: This table output not to be used for parsing, see "-p plugins" (via cif -h)
WARNING: Turn off this warning by adding: 'table_nowarning = 1' to your ~/.cif config

feed description:   scan infrastructure feed
feed reporttime:    2012-12-20T16:11:45Z
feed uuid:          7f734f92-6ce5-4f1c-8acf-cca304800873
feed guid:          everyone
feed restriction:   private
feed confidence:    85

restriction |guid    |assessment|description|confidence|detecttime          |reporttime          |address        |prefix          |protocol|portlist |asn   |asn_desc                                                                                        |cc|rir    |alternativeid_restriction|alternativeid                                              
need-to-know|everyone|scanner   |ssh        |85        |2012-12-20T16:00:00Z|2012-12-18T00:00:00Z|37.77.82.122   |37.77.80.0/20   |6       |22       | 57757|ENZUINC-EU Enzu Inc                                                                             |NL|RIPENCC|public                   |http://www.openbl.org/lists/date_all.txt                   
need-to-know|everyone|scanner   |ssh        |85        |2012-12-20T16:00:00Z|2012-12-19T00:00:00Z|119.188.7.201  |119.176.0.0/12  |6       |22       |  4837|CHINA169-BACKBONE CNCGROUP China169 Backbone                                                    |CN|APNIC  |public                   |http://danger.rulez.sk/projects/bruteforceblocker/blist.php
need-to-know|everyone|scanner   |ssh        |85        |2012-12-20T16:00:00Z|2012-12-19T00:00:00Z|111.74.82.33   |111.72.0.0/13   |6       |22       |  4134|CHINANET-BACKBONE No.31,Jin-rong Street                                                         |CN|APNIC  |public                   |http://www.openbl.org/lists/date_all.txt                   
need-to-know|everyone|scanner   |ssh        |85        |2012-12-20T16:00:00Z|2012-12-19T00:00:00Z|63.137.144.85  |63.137.0.0/16   |6       |22       |  3561|SAVVIS Savvis                   
...
...
...
}}}

= 7. Crontab = 
----

=== Configuring Crontab ===
 # log into the cif user (sudo su - cif) and modify it's cron tab (crontab -e)
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P -N -A root &> /dev/null
30     00     * * * /opt/cif/bin/cif_crontool -p daily -P -N -A root &> /dev/null

# if you've enabled feed generation in your config
45     *       * * * /opt/cif/bin/cif_feed &> /dev/null
}}}

=== Configuring Crontab with logging ===
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P -d -N -A root >> /home/cif/crontool_hourly.log 2>&1
30     00      * * * /opt/cif/bin/cif_crontool -p daily -P -d -N -A root >> /home/cif/crontool_daily.log 2>&1

# if you've enabled feed generation in your config
45     *       * * * /opt/cif/bin/cif_feed -d >> /home/cif/cif_feed.log 2>&1
}}}