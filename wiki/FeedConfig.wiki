#summary designing your own custom.cfg feed parsing config

= Introduction =

CIF comes with a variety of pre-built feed configurations, with that there are ways to create your own configs for various custom feeds.

= Details =
== Common Parameters ==
|| Parameter Name || Values || Description || Required ||
|| address || <ip_address><url><domain> || || yes ||
|| detecttime || <string> || Most common timestamp formats are valid || no ||
|| null || n/a || Use the null value for columns of data you want to ignore || no ||
|| feed || <uri><filename> || path to the feed || no ||
|| source || <FQDN> || source of the feed, usually the domain where the feed is from (eg: example.com) || no ||
|| impact || <string> || see TaxonomyImpact || no ||
|| description || <string> || short (1-2 space delimited word) description of the activity (eg: tdss spyeye) || no ||
|| severity || <string> || see TaxonomySeverity || no ||
|| confidence || <int> || see TaxonomyConfidence || no ||
|| guid || <string> || default: 'everyone' unless you know what you're doing || no ||
|| restriction || <string> || public, default, need-to-know, private || no ||
|| alternativeid || <string> || usually a url pointing to the original data point (as a reference id) || no ||
|| alternativeid_restriction || <string> || public, default, need-to-know,private || no ||
|| detection || <string> || hourly/daily: what to "fuzz" the detection string to || no ||
|| period || <string> || hourly/daily: how often the cif_crontool should pick up this feed (when in doubt, use daily) || no ||
|| mirror || <string> || file path (eg: mirror = '/tmp'), allows for testing to see if the downloaded feed has changed before re-downloading || no ||
|| zip_filename || <string> || when the feed is a zip file, this should identify what the zip header is || no ||

=== Delimited Text Files ===
{{{
severity = medium
confidence = 65
detection = daily
feed = "http://mirror1.malwaredomains.com/files/domains.txt"
impact = 'malicious domain'
source = 'malwaredomains.com'
restriction = need-to-know
alternativeid_restriction = public
guid = everyone

[domains]
values = 'null,null,address,description,alternativeid,null'
delimiter = '[\t|\f]'
period = daily
}}}
|| Parameter Name || Values || Description ||
|| values || <csv-string> || a comma separated list of values ||
|| delimiter || <string> || a sudo-regex that splits up the feed ||

=== NonDelimited Text Files ===
{{{
[sbl]
regex = '^\t\t(\S+)\t(\S+)\t(www.spamhaus.org/sbl/sbl.lasso\?query=sbl\d+)'
regex_values = 'address,description,alternativeid'
confidence = 85
period = daily
}}}
|| Parameter Name || Values || Description ||
|| regex || <string> || a regex string that splits up a line feed ||
|| regex_values || <csv-string> || a csv list that maps to the regex extracted values ||

=== XML Files ===
{{{
[cleanmx]
feed = 'http://support.clean-mx.de/clean-mx/xmlviruses.php?'
impact = 'malware url'
source = 'clean-mx.de'
node = entry
elements = 'id,first,md5,virusname,url'
elements_map = 'id,detecttime,malware_md5,description,address'
alternativeid = 'http://support.clean-mx.de/clean-mx/viruses.php?id=<id>'
period = daily
}}}
|| Parameter Name || Values || Description ||
|| node || <string> || what xml node we should use as the key node ||
|| elements || <csv-string> || what elements within <node> we should map out ||
|| elements_map || <csv-string> || what values we map the <elements> to ||

=== JSON Files ===
{{{
[phishtank]
guid = everyone
feed = http://data.phishtank.com/data/online-valid.json.gz
impact = 'phishing url'
source = 'phishtank.com'
fields = 'url,target,phish_detail_url'
fields_map = 'address,description,alternativeid'
detection = daily
severity = 'medium'
confidence = 85
restriction = 'need-to-know'
alternativeid_restriction = 'public'
}}}

|| Parameter Name || Values || Description ||
|| fields || <csv-string> || a comma separated list of the fields ||
|| field_map ||  <csv-string> || a comma separated list of the fields ||