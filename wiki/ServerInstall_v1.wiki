#summary the Server Installation (v1)

= WARNING -- UNDER CONSTRUCTION CHECK BACK AFTER RELEASE NOTE TO MAILING LIST =

= Before you Begin =
 * If you've never used CIF before, *STOP RIGHT HERE*, please see [ServerInstall_v0 installer] for v0 which is considered stable
 * From this point on, ignore all other doc (including any client side doc), this page includes all the doc required to test v1 and it could conflict with other doc creating confusion, pain and potential alcohol abuse..

= Table of Contents =
<wiki:toc max_depth="3" />

= Preamble =
== Changes==
=== RC1 ===
 * renamed cif-perl to libcif
 * renamed cif-dbi-perl to libcif-dbi
 * merged cif-client to libcif
 * libcif now provides (implements) cif-protocol
 * libcif now provides HTTP transport
 * renamed cif-router-perl to cif-router
 * renamed cif-smrt-perl to cif-smrt
 * misc bugfixes to cif-smrt
 * migrated Iodef::Pb to be auto-generated and implemented in Iodef::Pb::Simple
 * added simple access control to feed data-types (eg: domain, infrastructure, malware) based on apikey (eg: key can only access one of the feeds if you allow it, no query)

=== beta3 ===
 * re-architected cif-smrt for better memory + thread support via ZeroMQ
 * merged cif_analytics into cif-smrt as "postprocessors", disabled by default, enabled by use of the '-P' flag in cif_smrt
 * improved feed generation support
 * removed direct "dbi" database integration, now uses submission support in cif-client and cif-router
 * added submission support to cif-router
 * added key expiration to cif-router / cif-apikeys

=== beta2 ===
 * re-architected how feeds are generated (enabled only)
 * re-architected how ip-addresses are index'd (removed strict postgres dep)

=== beta1 ==
 * Moved from JSON to Google Protocol Buffers (protobuf)
 * added compression (compress-snappy)
 * enabled remote database connectivity
 * split out:
  * cif-perl (core cif messaging protocol)
  * cif-dbi-perl (core database interface)
  * cif-smrt (formally cif_feedparser)
  * cif-router (formally CIF::WebAPI)
 * turned cif-router into a driver framework (eg: HTTP, ZeroMQ are just plugins and can be swapped out)
 * simplified the CIF::Router api (removed severity and restriction from the api)
 * simplified the query data model, most things are now just sha1 hash lookups (with the exception of ipv4/6 addresses)
 * less "index" tables to swap in and out of memory, faster lookups, ip-addr's will follow in upcoming beta's

== Known Issues ==
  * *DO NOT USE THIS IF YOU'VE NEVER USED CIF BEFORE* please test out [ServerInstall_v0 v0]
 * You *cannot run this beta on the same box as CIF v0, it will break stuff, you will loose your data, you will be angry with me.
 * You *must drop* your cifv1 database before installing this beta

= System Requirements =
These requirements will handle everything on the same box pretty well with the default open source data-sets. The more (bigger) data-sets you add, the more ram / disk space you'll need. The more cores you add, the more threads that can "batch out" the feed parsers (thus, resulting in faster data consumption).

These specs will handle around 10k feeds at once with minimal impact on memory usage. Past that you'll need to start doubling your specs. Virtual machine technology is great for prototyping your implementation and will give you a good baseline of what you'll need for production.

 # an x86-64bit platform
 # at-least 8GB ram
 # at-least 4 cores
 # at-least 100GB of free (after OS install) disk space, which will last you about 6-9 months.

= Prerequisites =
 # [DiskLayout_v1 DiskLayout]
== System Deps ==
=== Standard Deps ===
==== Stable ====
==== Unstable ====
 # [ServerInstall_v1_Squeeze Debian Squeeze]
 # [ServerInstall_v1_Ubuntu Ubuntu]
 # [ServerInstall_v1_Generic From Source]

=== Non Standard Deps ===
 # [InstallZeroMQ_v1 InstallZeroMQ]

=== Configuration ===
 # [PostgresInstall_v1 PostgresInstall]
 # These scripts do a lot of dns queries. You're gonna wanna install bind and configure it to use forwarders. Maybe something like google public dns to help mask your queries. Then point your resolv.conf to 127.0.0.1
 # BindSetup
 # be sure to reload bind when you're done:
{{{
$ sudo /etc/init.d/bind9 restart
}}}

= Server =
== Disk Layout ==
 # create the index / archive table spaces if you haven't via [DiskLayout_v1 DiskLayout] already (it's OK if you don't want to use LVM, these directories can exist on your root volume if you choose, but performance will increase if these are spread out across many disks):
{{{
$ sudo mkdir /mnt/archive
$ sudo mkdir /mnt/index
$ sudo chown postgres:postgres /mnt/index
$ sudo chown postgres:postgres /mnt/archive
$ sudo chmod 770 /mnt/index
$ sudo chmod 770 /mnt/archive
}}}
== Default User ==
 # create your "cif" user/group (the configure script will default to this user "cif")
{{{
$ sudo adduser --disabled-password --gecos '' cif
}}}
== Install ==
 # the latest packages can be pulled from [http://code.google.com/p/collective-intelligence-framework/downloads/detail?name=cif-v1-b3.tar here]
{{{
$ wget http://collective-intelligence-framework.googlecode.com/files/cif-v1-rc1.tar
$ tar -xvf cif-v1-rc1.tar
libcif-v0.99.03-20-g535aa10.tar.gz
libcif-dbi-v0.99.04-22-gc86cc63.tar.gz
cif-smrt-v0.99.05-31-ge30ca20.tar.gz
cif-router-v0.99.04-8-g0d2d764.tar.gz
}}}
=== Core CIF Utility Library ===
 # libcif used to normalize timestamps and generate uuids, peer with cif-router
{{{
./configure
make testdeps
sudo make fixdeps
sudo make install
}}}
=== Database Interface ===
 # libcif-dbi is the database driver, mostly used by cif-router
 # run the ./configure:
{{{
$ ./configure
}}}
 # if you are running v1-b3 of CIF, make sure you stop apache and drop the previous database:
{{{
$ sudo /etc/init.d/apache2 stop
$ sudo make dropdb
$ sudo /etc/init.d/apache2 start
}}}
 # then re-init the database
{{{
./configure
make testdeps
sudo make fixdeps
sudo make install
sudo make initdb
make tables
}}}
 # these types of messages are considered normal:
{{{
NOTICE:  table "archive" does not exist, skipping
}}}
=== Router ===
 # cif-router provides a pluggable transport layer (HTTP, ZeroMQ) for the core protocol, it also provides read/write authorization support to the interfaces
{{{
./configure
make testdeps
sudo make fixdeps
sudo make install
}}}
=== Smrt Parser ===
 # cif-smrt is the former cif_feedparser, processes feeds and active lists into normalized formats (eg: IODEF)
{{{
./configure
make testdeps
sudo make fixdeps
sudo make install
}}}

== Configuration ==
=== Profile ===
 # log in as the cif user:
{{{
$ sudo su - cif
}}}
 # modify your local path, vi ~/.profile
{{{
if [ -d "/opt/cif/bin" ]; then
    PATH="/opt/cif/bin:$PATH"
fi
}}}
 # reload your env
{{{
$ source ~/.profile
}}}
=== APIKey ===
 # generate your initial apikey to be used by your client
{{{
$ cif_apikeys -u myuser@mydomain.com -a -g everyone -G everyone
userid              key                                  description guid                                 default_guid access write revoked expires created                      
myuser@mydomain.com 249cd5fd-04e3-46ad-bf0f-c02030cc864a             8c864306-d21a-37b1-8705-746a786719bf true         all                          2012-08-01 11:50:15.969724+00
}}}
 # check to make sure your 'guid' has _*8c864306-d21a-37b1-8705-746a786719bf*_ in it. If it doesn't you won't be able to see all the default, public data that's permissioned to the 'everyone' group in your system
 # generate a cif-smrt key to be used by cif_smrt to submit data to the router:
{{{
$ cif_apikeys -u cif_smrt -G everyone -g everyone -a -w
userid   key                                  description guid                                 default_guid restricted access write revoked expires created                      
cif_smrt bf1e0a9f-9518-409d-8e67-bfcc36dc5f44             8c864306-d21a-37b1-8705-746a786719bf true         0                 1                     2012-08-15 17:37:18.53348+00 
}}}
 # to list all of your apikeys:
{{{
$ cif_apikeys -l
}}}
 # cif_apikeys -h will give you an example of how to use the tool
=== Basic Configuration ===
 # log into the cif user:
{{{
$ sudo su - cif
$ vi ~/.cif
}}}
 # edit ~/.cif using this as a template:
{{{
[cif_feeds]
limit = 100000
confidence = 85,95
roles = everyone
limit_days = 7
enabled = infrastructure,domain,url

[cif_smrt]
# change example.com to your local domain and hostname respectively
name = example.com
instance = cif.example.com
# the apikey generated for cif_smrt
apikey = XXXXXX-XXX-XXXX 

[client]
# the apikey you generated for your client
apikey = XXXXXX-XXX-XXXX

[client_http]
host = https://localhost:443/api
verify_tls = 0

#[client_zeromq]
#host = tcp://localhost:5555

#[router_zeromq]
#host = tcp://localhost:5555

[restriction_map]
#public = limited
#need-to-know = amber
#private = red

[db]
host = 127.0.0.1
user = postgres
password =
database = cif

# csv delimited
[groups]
groups = everyone,staff,partners

}}}
=== Apache2 ===
 # enable the default-ssl site (debian):
{{{
$ sudo a2ensite default-ssl
$ sudo a2enmod apreq
$ sudo a2enmod ssl
}}}
 # unless you know what you're doing with virtual hosts, comment out the port-80 stuff in /etc/apache2/ports.conf
{{{
# If you just change the port or add more ports here, you will likely also
# have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default
# This is also true if you have upgraded from before 2.2.9-3 (i.e. from
# Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and
# README.Debian.gz

+ #NameVirtualHost *:80
+ #Listen 80

<IfModule mod_ssl.c>
    # If you add NameVirtualHost *:443 here, you will also have to change
    # the VirtualHost statement in /etc/apache2/sites-available/default-ssl
    ...
}}}
 # configure apache2, add this line to your default-ssl site (or default if you're not using TLS)
{{{
<IfModule mod_ssl.c>
<VirtualHost _default_:443>
+      PerlRequire /opt/cif/bin/rest_api.pl
+      Include /etc/apache2/cif.conf
....
}}}
 # create your config at /etc/apache2/cif.conf, which should look like:
{{{
<Location /api>
    SetHandler perl-script
    PerlResponseHandler CIF::Router::REST
    PerlSetVar CIFRouterRESTConfig "/home/cif/.cif"
</Location>

}}}
 # add your "www-data" user (whoever apache is set to run under) to the group "cif" (/etc/group):
{{{
$ sudo adduser www-data cif
}}}
 # restart apache2
== Initial Data Load ==
 # sudo into the cif user and create your custom.cfg config if you're not upgrading from a previous version:
{{{
$ sudo su - cif
$ cd /opt/cif/etc
$ cp custom.cfg.example custom.cfg
$ chmod 660 custom.cfg
}}}
 # run the cif_crontool
{{{
$ cd /opt/cif
$ time ./bin/cif_crontool -d -P
$ time ./bin/cif_crontool -p hourly -d -P
}}}
 * when that's finished, run your first batch of feeds
{{{
$ time /opt/cif/bin/cif_feed -d -S infrastructure,domain,url
}}}
== Finishing up ==
 # log into the cif user (sudo su - cif) and modify it's cron tab (crontab -e)
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P &> /dev/null
30     00      * * * /opt/cif/bin/cif_crontool -p daily -P &> /dev/null

# update the feeds
45     *       * * * /opt/cif/bin/cif_feed -S infrastructure,domain,url &> /dev/null
}}}
 # or if you want to setup logging (as an example)
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -P -d >> /home/cif/crontool_hourly.log 2>&1
30     00      * * * /opt/cif/bin/cif_crontool -p daily -P -d >> /home/cif/crontool_daily.log 2>&1

# update the feeds
45     *       * * * /opt/cif/bin/cif_feed -d -S infrastructure,domain,url >> /home/cif/feeds.log 2>&1
}}}