#summary introduction to the API

<wiki:toc max_depth="4" />
= Introduction =

The CIF WebAPI is the programming interface to CIF. You can use this API to integrate CIF based data into your day to day applications (RT, ArcSight, NFSen, Placid, etc...)

= Authorization =

This API uses a simple UUID for it's authorization. This key is passed to the api using the following parameter:
{{{
&apikey=xxxx
}}}

= API Calls =
The CIF WebAPI follows a RESTful API design,  meaning that you use standard HTTP methods to retrieve and manipulate resources. For example, to get the profile of a user, you might send an HTTP request like:
{{{
GET https://cif.example.com:443/api/example.com?apikey=xxxxx

GET https://cif.example.com:443/api/example.com?apikey=xxxxx&severity=high

GET https://cif.example.com:443/api/example.com?apikey=xxxxx&severity=high&confidence=50

GET https://cif.example.com:443/api/example.com?apikey=xxxxx&nolog=1

GET https://cif.example.com:443/api/infrastructure?apikey=xxxxx

GET https://cif.example.com:443/api/domain/botnet?apikey=xxxxx


}}}
== Common Parameters ==
|| Parameter Name || Value || Description ||
|| apikey || <uuid> || specify your apikey ||
|| severity || <enum> || filter by severity, *low,medium,high* ||
|| confidence || <real> || filter by confidence, *0-100* ||
|| restriction || <enum> || filter by restriction, *public,need-to-know,private* ||
|| guid || <uuid> || filter by group uuid ||
|| nomap || <boolean> || don't map restriction to your local restriction map ||
|| nolog || <boolean> || don't log the query ||

== Common Datatypes ==
=== Infrastructure ===
==== Description ====
Commonly used to describe ipv4 and ipv6 based addresses.
==== Examples ====
{{{
GET https://cif.example.com:443/api/1.1.1.1?apikey=xxxxx
GET https://cif.example.com:443/api/1.1.1.0/24?apikey=xxxxx
GET https://cif.example.com:443/api/infrastructure/botnet?apikey=xxxxx
GET https://cif.example.com:443/api/infrastructure/malware?apikey=xxxxx&confidence=40
GET https://cif.example.com:443/api/infrastructure/phishing?apikey=xxxxx&severity=medium
}}}
=== Domain ===
==== Description ====
Commonly used to describe FQDN based addresses.
==== Examples ====
{{{
GET https://cif.example.com:443/api/example.com?apikey=xxxxx
GET https://cif.example.com:443/api/test.example.com?apikey=xxxxx
GET https://cif.example.com:443/api/domain/botnet?apikey=xxxxx
GET https://cif.example.com:443/api/domain/malware?apikey=xxxxx&confidence=40
GET https://cif.example.com:443/api/domain/phishing?apikey=xxxxx&severity=medium
}}}
=== Url ===
==== Description ====
Commonly used to describe URI based addresses. To query the api though, your code must:
 # escape unsafe chars (this is what the data-warehouse does on it's end before normalizing a URI)
 # lower-case the address
 # strip off any trailing forward slashes (s/\/$//g)
 # take the SHA1 hex of the address
 # query the api using that SHA1-based hash (hex)
{{{
use Digest::SHA1 qw/sha1_hex/;
use URI::Escape;
my $q = $args{'query'};
if(lc($q) =~ /^http(s)?:\/\//){
    ## escape unsafe chars, that's what the data-warehouse does
    ## TODO -- doc this
    $q = uri_escape($q,'\x00-\x1f\x7f-\xff');
    $q = lc($q);
    $q = sha1_hex($q);
}
}}}
==== Examples ====
{{{
GET https://cif.example.com:443/api/98fea5ad2da764a57e3493a78b1dd60061d61e08?apikey=xxxxx
GET https://cif.example.com:443/api/url/botnet?apikey=xxxxx
GET https://cif.example.com:443/api/url/malware?apikey=xxxxx&confidence=40
GET https://cif.example.com:443/api/url/phishing?apikey=xxxxx&severity=medium
}}}

= Data Formats =
Resources in the CIF WebAPI are represented using JSON+IODEF embedded in a sort of JSON+ATOM data formats. For example, retrieving a malicious domain address may result in a response like:
{{{
{
  "status": 200,
  "data": {
    "feed": {
      "source": "c2a2473aa6adcaf5fd68cb2a02a6d3a1510e7b10",
      "group_map": {
        "8c864306-d21a-37b1-8705-746a786719bf": "everyone",
       },
       "entry": [
         {
           "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
           "version": "1.0",
	   "Incident": {
    	     "Assessment": {
	       "Impact": {
		  "content": "search",
		  "severity": "low"
	       },
	       "Confidence": {
	         "content": "50",
                 "rating": "numeric"
               }
             },
             "purpose": "mitigation",
	     "EventData": {
	       "Flow": {
		  "System": {
		    "Node": {
		      "Address": {
		        "content": "example.com",
			"category": "ext-value",
			"ext-category": "domain"
		      }
		    },
		   "AdditionalData": {
		     "dtype": "string",
		     "content": "A",
		     "meaning": "type"
		   }
		 }
	       }
	     },
	     "IncidentID": {
	       "name": "ce61a4b0-2116-39a7-9a28-3592c192bb90"
	     },
	     "DetectTime": "2011-10-04T00:00:00Z",
             "restriction": "private",
             "Description": "search example.com",
             "AdditionalData": {
               "dtype": "string",
               "content": "0f3421e5-c4d7-323c-af8c-eb32c12f08c5",
               "meaning": "guid"
             }
           },
           "xsi:schemaLocation": "urn:ietf:params:xmls:schema:iodef-1.0",
           "uuid": "6efcfaa6-80ad-547c-a914-0c0ea54dcdbb"
         }
       ],
       "detecttime": "2011-10-04T20:20:45Z",
       "description": "search example.com",
       "restriction": "private"
     }
  },
  "message": ""
}
}}}
The "feed" structure embeds the IODEF objects as entries.
== Common Parameters ==
 * [http://tools.ietf.org/html/rfc4287 ATOM]
 * [http://tools.ietf.org/html/rfc5070 IODEF]