#summary guide to configuring postgres (v1)
#labels Version-1

* Introduction *

This guide will show you how to setup an embedded instance of postgres using localhost. This config assumes you have trusted access to the instance from localhost.

* Table of Contents *
<wiki:toc max_depth="2" />

= Required Setup =
== Directory Permission Configuration ==
----
=== Small Install ===
 # Set the appropriate permissions:
{{{
$ sudo chown postgres:postgres /mnt/archive
$ sudo chown postgres:postgres /mnt/index
}}}
=== Large Install ===
 # Set the appropriate permissions and link the pg_xlog directory:
{{{
$ sudo chown postgres:postgres /mnt/archive
$ sudo chown postgres:postgres /mnt/index
$ sudo chown postgres:postgres pg_xlog
$ sudo ln -sf /mnt/pg_xlog /var/lib/postgresql/X.X/main/pg_xlog
}}}

== Postgres Authentication Configuration ==
----
 # Modify your postgres config accordingly (note the 'trust' setting, make sure your iptables are up to date!):
{{{
sudo vi /etc/postgresql/X.X/main/pg_hba.conf
}}}
{{{
 # (autovacuum, daily cronjob, replication, and similar tasks).
 #
 # Database administrative login by UNIX sockets
-local   all         postgres                          ident sameuser
+local   all         postgres                          trust 
 
 # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
 
 # "local" is for Unix domain socket connections only
-local   all         all                               ident sameuser
+local   all         all                               trust 
 # IPv4 local connections:
-host    all         all         127.0.0.1/32          md5
+host    all         all         127.0.0.1/32          trust
 # IPv6 local connections:
-host    all         all         ::1/128               md5
+host    all         all         ::1/128               trust
}}}

== Performance Configuration ==
----
*NOTE:* These recommend numbers have been tested on a machine with 4 cores and 8 GB of ram. During testing we found that these values may be too high for a machine with 4 GB of ram. If you are testing this on a machine with less than 8 GB of ram, you may want to skip this section all together or reduce the numbers these shell script spit out. 

 # Create backups of system files:
{{{
sudo cp /etc/sysctl.conf /etc/sysctl.conf.orig
sudo cp /etc/postgresql/X.X/main/postgresql.conf /etc/postgresql/X.X/main/postgresql.conf.orig
}}}
 # create shmsetup.sh to configure:  
  * shared memory  (to about 1/2 - 2/3 the amount of system ram)
  * control virtual memory overcommit and swappiness
{{{
$ vi shmsetup.sh
}}}
{{{
#!/bin/bash
page_size=`getconf PAGE_SIZE`
phys_pages=`getconf _PHYS_PAGES`
shmall=`expr $phys_pages / 2`
shmmax=`expr $shmall \* $page_size`
echo kernel.shmmax = $shmmax
echo kernel.shmall = $shmall
echo vm.overcommit_memory = 2
echo vm.swappiness = 0
# testing
#echo vm.overcommit_ratio = 100
}}}
 # run the script
{{{
$ /bin/bash shmsetup.sh | sudo tee -a /etc/sysctl.conf
}}}
 # reload the kernel settings
{{{
$ sudo sysctl -p
}}}
 # Comment out existing shared_buffers and max_connections settings so it can be set below
{{{
sudo sed -i 's/shared_buffers/#shared_buffers/' /etc/postgresql/X.X/main/postgresql.conf
sudo sed -i 's/max_connections/#max_connections/' /etc/postgresql/X.X/main/postgresql.conf
}}}
 # create postgressetup.sh to configure better defaults for your CIF installation
{{{
$ vi postgressetup.sh
}}}
{{{
#!/bin/bash
page_size=`getconf PAGE_SIZE`
phys_pages=`getconf _PHYS_PAGES`
total_ram_b=`expr $page_size \* $phys_pages`
total_ram_kb=`expr $total_ram_b / 1024`
total_ram_mb=`expr $total_ram_kb / 1024`
ten_percent_total_ram=`expr $total_ram_mb / 10`

work_mem=`expr $total_ram_mb / 8`
shared_buffers=$ten_percent_total_ram
effective_cache_size=`expr $ten_percent_total_ram \* 6`

echo ""
echo ""
echo "#------------------------------------------------------------------------------"
echo "# CIF Setup                                                                    "
echo "#------------------------------------------------------------------------------"
echo "# Rough estimates on how to configured postgres to work with large data sets"
echo "# See the following URL for proper postgres performance tuning"
echo "# http://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server"
echo "wal_buffers = 12MB" " # recommended range for this value is between 2-16MB"
echo "work_mem = $work_mem""MB" " # minimum 512MB needed for cif_feed"
echo "shared_buffers = $shared_buffers""MB" "# recommended range for this value is 10% on shared db server"
echo "checkpoint_segments = 10" " # at least 10, 32 is a more common value on dedicated server class hardware"
echo "effective_cache_size = $effective_cache_size""MB" " # recommended range for this value is between 60%-80% of your total available RAM"
echo "max_connections = 8" " # limiting to 8 due to high work_mem value"
}}}
 # run the script
{{{
$ /bin/bash postgressetup.sh | sudo tee -a /etc/postgresql/X.X/main/postgresql.conf
}}}
== Testing ==
----
 # restart postgres
  * Ubuntu 12.04
{{{
$ sudo service postgresql restart
}}}
 # make sure your user can log in:
{{{
$> psql -U postgres
}}}
{{{
postgres=#
postgres=#\l
                                 List of databases
   Name    |  Owner   | Encoding | Collation  |   Ctype    |   Access privileges   
-----------+----------+----------+------------+------------+-----------------------
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres
                                                           : postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres
                                                           : postgres=CTc/postgres
(3 rows)
postgres=#\q
}}}
 # if you have issues logging in, it's typically because of a bad pg_hba.conf file, double check your config and reload postgres.

= Optional Setup =
== Disk Write Performance ==
----
 # *EXPERIMENTAL* check your blockdev setting in rc.local:
{{{
/sbin/blockdev --setra 4096 /dev/mapper/ses--qa1-archive
/sbin/blockdev --setra 4096 /dev/mapper/ses--qa1-index
/sbin/blockdev --setra 4096 /dev/mapper/ses--qa1-dbsystem
}}}

= Continue with configuration =
----
Continue with the [ServerInstall_v1_RC2#Installing_CIF Installing CIF]

= Helpful References =
----
 # http://www.amazon.com/PostgreSQL-High-Performance-Gregory-Smith/dp/184951030X/ref=sr_1_1?ie=UTF8&qid=1321356392&sr=8-1
 # http://developer.postgresql.org/pgdocs/postgres/kernel-resources.html
 # http://momjian.us/main/writings/pgsql/hw_performance/
 # http://www.revsys.com/writings/postgresql-performance.html
 # http://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
 # http://wiki.postgresql.org/wiki/FAQ
 # http://www.thegeekstuff.com/2009/05/15-advanced-postgresql-commands-with-examples/
 # http://wiki.postgresql.org/wiki/Disk_Usage