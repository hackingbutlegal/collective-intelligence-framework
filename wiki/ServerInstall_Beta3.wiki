#labels Phase-Implementation,Phase-Deploy,Featured
this page describes the Beta3 Server Installation

<wiki:toc max_depth="3" />

= Preamble =
*THIS PAGE UNDER CONSTRUCTION*
*WE'RE STILL SQUASHING FINAL RELEASE BUGS, TEST AT OWN RISK*

Most things are stable; you might have to dump your database between releases until we're out of beta.

These scripts do a lot of dns queries. You're gonna wanna install bind and configure it to use forwarders. Maybe something like google public dns to help mask your queries. Then point your resolv.conf to localhost

Once installed, monitor your dns traffic a bit, your server will be looking up some interesting information. Get a good handle on this and work with your security teams to whitelist this server.

= System Requirements =
These requirements will handle everything on the same box pretty well with the default open source data-sets. The more (bigger) data-sets you add, the more ram / disk space you'll need. The more cores you add, the more threads that can "batch out" the feed parsers (thus, resulting in faster data consumption).

These specs will handle around 10k feeds at once with minimal impact on memory usage. Past that you'll need to start doubling your specs. Virtual machine technology is great for prototyping your implementation and will give you a good baseline of what you'll need for production.

 # at-least 4 gig of ram
 # at-least 4 cores
 # at-least 35gig of disk space

= Prerequisites =
== Required Services ==
 # Join the [http://groups.google.com/group/ci-framework mailing list] -- we like to archive the Q and A there. When you ask questions directly, I will usually Cc my responses.
 # PostgresInstall
 # BindSetup

== System Deps ==
 # ServerInstall_Beta3_Generic
 # ServerInstall_Beta3_Lenny
 # ServerInstall_Beta3_Ubuntu10

= Install =
== Known Issues ==
 # libwww6 was released mid-stream on us; which drastically changes the way libwww works (LWP, etc). Before you begin, make sure you update your libwww-perl instance to v6 until we fix this in the Makefile.am:
{{{
$ sudo perl -MCPAN -e 'install LWP::Simple'
}}}

== Server ==
 # install the PerlClient (we use some functions in it for the server)
 # create your "cif" user/group (the configure script will default to this user "cif")
{{{
$ sudo useradd -U -m cif
}}}
 # install the core server interface
{{{
$ wget http://collective-intelligence-framework.googlecode.com/files/cif-0.01_20110729_163359.tar.gz
$ tar -zxvf cif-0.01_20110729_163359.tar.gz
$ cd cif-0.01_20110729_163359
$ ./configure
$ make testdeps
$ make fixdeps
$ sudo make install
}}}
 # if this is a first-time install:
{{{
$ make initdb
$ make tables
}}}
 # if you're upgrading a previous install you'll need to restart apache2
{{{
$ sudo /etc/init.d/apache2 restart
}}}

== Configuration ==
 # log in as the cif user:
{{{
$ sudo su - cif
}}}
 # modify your local path, vi ~/.profile
{{{
if [ -d "/opt/cif/bin" ]; then
    PATH="/opt/cif/bin:$PATH"
fi
}}}
 # generate your initial apikey to be used with your [ClientSetup client]
{{{
$ cif_apikeys -u myuser@mydomain.com -a
}}}
 # to list all of your apikeys:
{{{
$ cif_apikeys -l
}}}
 # cif_apikeys -h will give you an example of how to use the tool
 # configure your ~/.cif for generating feeds
{{{
[cif_feeds]
maxrecords = 1000000
severity_feeds = high,medium
confidence_feeds = 40,85,95
max_days = 2
disabled_feeds = hash
}}}
 # install the apache2 config
  # [Beta3Apache2Debian Debian Based]
  # your config should look something like
{{{
<Location /api>
    SetHandler perl-script
    PerlSetVar Apache2RESTHandlerRootClass "CIF::WebAPI::Plugin"
    PerlSetVar Apache2RESTAPIBase "/api"
    PerlResponseHandler Apache2::REST
    PerlSetVar Apache2RESTWriterDefault 'json'
    PerlSetVar Apache2RESTAppAuth 'CIF::WebAPI::AppAuth'

    # feed defaults
    PerlSetVar CIFFeedResultsDefault 10000
    PerlSetVar CIFDefaultFeedSeverity "high"

    # extra outputs
    PerlAddVar Apache2RESTWriterRegistry 'table'
    PerlAddVar Apache2RESTWriterRegistry 'CIF::WebAPI::Writer::table'

    # restriction mapping
#    PerlAddVar CIFRestrictionMap 'private'
#    PerlAddVar CIFRestrictionMap 'RESTRICTED'
</Location>
}}}
 # add your "www-data" user (whoever apache is set to run under) to the group "cif" (/etc/group):
{{{
$ sudo adduser www-data cif
}}}
 # restart apache2
== Load Data ==
 # perform [Tools_cif_crontool cif_crontool's] "first run" to prime the database with it's initial intel (should take about 30min).
{{{
$ time /opt/cif/bin/cif_crontool -f -d
}}}
 # after this starts, run your first batch of analytics (the first batch might take a few days)
{{{
$ time /opt/cif/bin/cif_analytic -d -t 16 -m 250
}}}
 # when that's finished, run your first batch of feeds
{{{
$ time /opt/cif/bin/cif_feeds -d
}}}
== Finishing up ==
 # log into the cif user (sudo su - cif) and modify it's cron tab (crontab -e)
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# run analytics
*/5 * * * * /opt/cif/bin/cif_analytic -t 16 -m 250&> /dev/null

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -T medium &> /dev/null
30     00      * * * /opt/cif/bin/cif_crontool -p daily -T low &> /dev/null

# update the feeds
00,15,30,45     *       * * * /opt/cif/bin/cif_feeds &> /dev/null
}}}
 # or if you want to setup logging (as an example)
{{{
# set the path
PATH=/bin:/usr/local/bin:/opt/cif/bin

# run analytics
*/5 * * * * /opt/cif/bin/cif_analytic -d -t 16 -m 250 >> /home/cif/analytics.log 2>&1

# pull feed data
05     *       * * * /opt/cif/bin/cif_crontool -p hourly -T medium >> /home/cif/crontool_hourly.log 2>&1
30     00      * * * /opt/cif/bin/cif_crontool -p daily -T low >> /home/cif/crontool_daily.log 2>&1

# update the feeds
00,15,30,45     *       * * * /opt/cif/bin/cif_feeds >> /home/cif/feeds.log 2>&1
}}}